// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_pnc_junction.proto

#ifndef PROTOBUF_INCLUDED_map_5fpnc_5fjunction_2eproto
#define PROTOBUF_INCLUDED_map_5fpnc_5fjunction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "map_id.pb.h"
#include "map_geometry.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fpnc_5fjunction_2eproto 

namespace protobuf_map_5fpnc_5fjunction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_map_5fpnc_5fjunction_2eproto
namespace cvte {
namespace hdmap {
class PNCJunction;
class PNCJunctionDefaultTypeInternal;
extern PNCJunctionDefaultTypeInternal _PNCJunction_default_instance_;
class Passage;
class PassageDefaultTypeInternal;
extern PassageDefaultTypeInternal _Passage_default_instance_;
class PassageGroup;
class PassageGroupDefaultTypeInternal;
extern PassageGroupDefaultTypeInternal _PassageGroup_default_instance_;
}  // namespace hdmap
}  // namespace cvte
namespace google {
namespace protobuf {
template<> ::cvte::hdmap::PNCJunction* Arena::CreateMaybeMessage<::cvte::hdmap::PNCJunction>(Arena*);
template<> ::cvte::hdmap::Passage* Arena::CreateMaybeMessage<::cvte::hdmap::Passage>(Arena*);
template<> ::cvte::hdmap::PassageGroup* Arena::CreateMaybeMessage<::cvte::hdmap::PassageGroup>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cvte {
namespace hdmap {

enum Passage_Type {
  Passage_Type_UNKNOWN = 0,
  Passage_Type_ENTRANCE = 1,
  Passage_Type_EXIT = 2
};
bool Passage_Type_IsValid(int value);
const Passage_Type Passage_Type_Type_MIN = Passage_Type_UNKNOWN;
const Passage_Type Passage_Type_Type_MAX = Passage_Type_EXIT;
const int Passage_Type_Type_ARRAYSIZE = Passage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Passage_Type_descriptor();
inline const ::std::string& Passage_Type_Name(Passage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Passage_Type_descriptor(), value);
}
inline bool Passage_Type_Parse(
    const ::std::string& name, Passage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Passage_Type>(
    Passage_Type_descriptor(), name, value);
}
// ===================================================================

class Passage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.Passage) */ {
 public:
  Passage();
  virtual ~Passage();

  Passage(const Passage& from);

  inline Passage& operator=(const Passage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Passage(Passage&& from) noexcept
    : Passage() {
    *this = ::std::move(from);
  }

  inline Passage& operator=(Passage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Passage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Passage* internal_default_instance() {
    return reinterpret_cast<const Passage*>(
               &_Passage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Passage* other);
  friend void swap(Passage& a, Passage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Passage* New() const final {
    return CreateMaybeMessage<Passage>(NULL);
  }

  Passage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Passage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Passage& from);
  void MergeFrom(const Passage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Passage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Passage_Type Type;
  static const Type UNKNOWN =
    Passage_Type_UNKNOWN;
  static const Type ENTRANCE =
    Passage_Type_ENTRANCE;
  static const Type EXIT =
    Passage_Type_EXIT;
  static inline bool Type_IsValid(int value) {
    return Passage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Passage_Type_Type_MIN;
  static const Type Type_MAX =
    Passage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Passage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Passage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Passage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Passage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .cvte.hdmap.Id signal_id = 2;
  int signal_id_size() const;
  void clear_signal_id();
  static const int kSignalIdFieldNumber = 2;
  ::cvte::hdmap::Id* mutable_signal_id(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
      mutable_signal_id();
  const ::cvte::hdmap::Id& signal_id(int index) const;
  ::cvte::hdmap::Id* add_signal_id();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
      signal_id() const;

  // repeated .cvte.hdmap.Id yield_id = 3;
  int yield_id_size() const;
  void clear_yield_id();
  static const int kYieldIdFieldNumber = 3;
  ::cvte::hdmap::Id* mutable_yield_id(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
      mutable_yield_id();
  const ::cvte::hdmap::Id& yield_id(int index) const;
  ::cvte::hdmap::Id* add_yield_id();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
      yield_id() const;

  // repeated .cvte.hdmap.Id stop_sign_id = 4;
  int stop_sign_id_size() const;
  void clear_stop_sign_id();
  static const int kStopSignIdFieldNumber = 4;
  ::cvte::hdmap::Id* mutable_stop_sign_id(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
      mutable_stop_sign_id();
  const ::cvte::hdmap::Id& stop_sign_id(int index) const;
  ::cvte::hdmap::Id* add_stop_sign_id();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
      stop_sign_id() const;

  // repeated .cvte.hdmap.Id lane_id = 5;
  int lane_id_size() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 5;
  ::cvte::hdmap::Id* mutable_lane_id(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
      mutable_lane_id();
  const ::cvte::hdmap::Id& lane_id(int index) const;
  ::cvte::hdmap::Id* add_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
      lane_id() const;

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Passage.Type type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::cvte::hdmap::Passage_Type type() const;
  void set_type(::cvte::hdmap::Passage_Type value);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.Passage)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id > signal_id_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id > yield_id_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id > stop_sign_id_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id > lane_id_;
  ::cvte::hdmap::Id* id_;
  int type_;
  friend struct ::protobuf_map_5fpnc_5fjunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PassageGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.PassageGroup) */ {
 public:
  PassageGroup();
  virtual ~PassageGroup();

  PassageGroup(const PassageGroup& from);

  inline PassageGroup& operator=(const PassageGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PassageGroup(PassageGroup&& from) noexcept
    : PassageGroup() {
    *this = ::std::move(from);
  }

  inline PassageGroup& operator=(PassageGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassageGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassageGroup* internal_default_instance() {
    return reinterpret_cast<const PassageGroup*>(
               &_PassageGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PassageGroup* other);
  friend void swap(PassageGroup& a, PassageGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PassageGroup* New() const final {
    return CreateMaybeMessage<PassageGroup>(NULL);
  }

  PassageGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PassageGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PassageGroup& from);
  void MergeFrom(const PassageGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassageGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cvte.hdmap.Passage passage = 2;
  int passage_size() const;
  void clear_passage();
  static const int kPassageFieldNumber = 2;
  ::cvte::hdmap::Passage* mutable_passage(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Passage >*
      mutable_passage();
  const ::cvte::hdmap::Passage& passage(int index) const;
  ::cvte::hdmap::Passage* add_passage();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Passage >&
      passage() const;

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.PassageGroup)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Passage > passage_;
  ::cvte::hdmap::Id* id_;
  friend struct ::protobuf_map_5fpnc_5fjunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PNCJunction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.PNCJunction) */ {
 public:
  PNCJunction();
  virtual ~PNCJunction();

  PNCJunction(const PNCJunction& from);

  inline PNCJunction& operator=(const PNCJunction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PNCJunction(PNCJunction&& from) noexcept
    : PNCJunction() {
    *this = ::std::move(from);
  }

  inline PNCJunction& operator=(PNCJunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PNCJunction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PNCJunction* internal_default_instance() {
    return reinterpret_cast<const PNCJunction*>(
               &_PNCJunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PNCJunction* other);
  friend void swap(PNCJunction& a, PNCJunction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PNCJunction* New() const final {
    return CreateMaybeMessage<PNCJunction>(NULL);
  }

  PNCJunction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PNCJunction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PNCJunction& from);
  void MergeFrom(const PNCJunction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PNCJunction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cvte.hdmap.Id overlap_id = 3;
  int overlap_id_size() const;
  void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 3;
  ::cvte::hdmap::Id* mutable_overlap_id(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
      mutable_overlap_id();
  const ::cvte::hdmap::Id& overlap_id(int index) const;
  ::cvte::hdmap::Id* add_overlap_id();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
      overlap_id() const;

  // repeated .cvte.hdmap.PassageGroup passage_group = 4;
  int passage_group_size() const;
  void clear_passage_group();
  static const int kPassageGroupFieldNumber = 4;
  ::cvte::hdmap::PassageGroup* mutable_passage_group(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::PassageGroup >*
      mutable_passage_group();
  const ::cvte::hdmap::PassageGroup& passage_group(int index) const;
  ::cvte::hdmap::PassageGroup* add_passage_group();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::PassageGroup >&
      passage_group() const;

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.PNCJunction)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id > overlap_id_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::PassageGroup > passage_group_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  friend struct ::protobuf_map_5fpnc_5fjunction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Passage

// optional .cvte.hdmap.Id id = 1;
inline bool Passage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Passage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Passage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::cvte::hdmap::Id& Passage::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& Passage::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.Passage.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* Passage::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.Passage.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* Passage::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Passage.id)
  return id_;
}
inline void Passage::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.Passage.id)
}

// repeated .cvte.hdmap.Id signal_id = 2;
inline int Passage::signal_id_size() const {
  return signal_id_.size();
}
inline ::cvte::hdmap::Id* Passage::mutable_signal_id(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Passage.signal_id)
  return signal_id_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
Passage::mutable_signal_id() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.Passage.signal_id)
  return &signal_id_;
}
inline const ::cvte::hdmap::Id& Passage::signal_id(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Passage.signal_id)
  return signal_id_.Get(index);
}
inline ::cvte::hdmap::Id* Passage::add_signal_id() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.Passage.signal_id)
  return signal_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
Passage::signal_id() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.Passage.signal_id)
  return signal_id_;
}

// repeated .cvte.hdmap.Id yield_id = 3;
inline int Passage::yield_id_size() const {
  return yield_id_.size();
}
inline ::cvte::hdmap::Id* Passage::mutable_yield_id(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Passage.yield_id)
  return yield_id_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
Passage::mutable_yield_id() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.Passage.yield_id)
  return &yield_id_;
}
inline const ::cvte::hdmap::Id& Passage::yield_id(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Passage.yield_id)
  return yield_id_.Get(index);
}
inline ::cvte::hdmap::Id* Passage::add_yield_id() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.Passage.yield_id)
  return yield_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
Passage::yield_id() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.Passage.yield_id)
  return yield_id_;
}

// repeated .cvte.hdmap.Id stop_sign_id = 4;
inline int Passage::stop_sign_id_size() const {
  return stop_sign_id_.size();
}
inline ::cvte::hdmap::Id* Passage::mutable_stop_sign_id(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Passage.stop_sign_id)
  return stop_sign_id_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
Passage::mutable_stop_sign_id() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.Passage.stop_sign_id)
  return &stop_sign_id_;
}
inline const ::cvte::hdmap::Id& Passage::stop_sign_id(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Passage.stop_sign_id)
  return stop_sign_id_.Get(index);
}
inline ::cvte::hdmap::Id* Passage::add_stop_sign_id() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.Passage.stop_sign_id)
  return stop_sign_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
Passage::stop_sign_id() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.Passage.stop_sign_id)
  return stop_sign_id_;
}

// repeated .cvte.hdmap.Id lane_id = 5;
inline int Passage::lane_id_size() const {
  return lane_id_.size();
}
inline ::cvte::hdmap::Id* Passage::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Passage.lane_id)
  return lane_id_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
Passage::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.Passage.lane_id)
  return &lane_id_;
}
inline const ::cvte::hdmap::Id& Passage::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Passage.lane_id)
  return lane_id_.Get(index);
}
inline ::cvte::hdmap::Id* Passage::add_lane_id() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.Passage.lane_id)
  return lane_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
Passage::lane_id() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.Passage.lane_id)
  return lane_id_;
}

// optional .cvte.hdmap.Passage.Type type = 6;
inline bool Passage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Passage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Passage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Passage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cvte::hdmap::Passage_Type Passage::type() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Passage.type)
  return static_cast< ::cvte::hdmap::Passage_Type >(type_);
}
inline void Passage::set_type(::cvte::hdmap::Passage_Type value) {
  assert(::cvte::hdmap::Passage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.Passage.type)
}

// -------------------------------------------------------------------

// PassageGroup

// optional .cvte.hdmap.Id id = 1;
inline bool PassageGroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassageGroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassageGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::cvte::hdmap::Id& PassageGroup::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& PassageGroup::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.PassageGroup.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* PassageGroup::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.PassageGroup.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* PassageGroup::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PassageGroup.id)
  return id_;
}
inline void PassageGroup::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.PassageGroup.id)
}

// repeated .cvte.hdmap.Passage passage = 2;
inline int PassageGroup::passage_size() const {
  return passage_.size();
}
inline void PassageGroup::clear_passage() {
  passage_.Clear();
}
inline ::cvte::hdmap::Passage* PassageGroup::mutable_passage(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PassageGroup.passage)
  return passage_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Passage >*
PassageGroup::mutable_passage() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.PassageGroup.passage)
  return &passage_;
}
inline const ::cvte::hdmap::Passage& PassageGroup::passage(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PassageGroup.passage)
  return passage_.Get(index);
}
inline ::cvte::hdmap::Passage* PassageGroup::add_passage() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.PassageGroup.passage)
  return passage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Passage >&
PassageGroup::passage() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.PassageGroup.passage)
  return passage_;
}

// -------------------------------------------------------------------

// PNCJunction

// optional .cvte.hdmap.Id id = 1;
inline bool PNCJunction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PNCJunction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PNCJunction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::cvte::hdmap::Id& PNCJunction::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& PNCJunction::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.PNCJunction.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* PNCJunction::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.PNCJunction.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* PNCJunction::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PNCJunction.id)
  return id_;
}
inline void PNCJunction::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.PNCJunction.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool PNCJunction::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PNCJunction::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PNCJunction::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cvte::hdmap::Polygon& PNCJunction::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& PNCJunction::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.PNCJunction.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* PNCJunction::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.PNCJunction.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* PNCJunction::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PNCJunction.polygon)
  return polygon_;
}
inline void PNCJunction::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.PNCJunction.polygon)
}

// repeated .cvte.hdmap.Id overlap_id = 3;
inline int PNCJunction::overlap_id_size() const {
  return overlap_id_.size();
}
inline ::cvte::hdmap::Id* PNCJunction::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PNCJunction.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
PNCJunction::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.PNCJunction.overlap_id)
  return &overlap_id_;
}
inline const ::cvte::hdmap::Id& PNCJunction::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PNCJunction.overlap_id)
  return overlap_id_.Get(index);
}
inline ::cvte::hdmap::Id* PNCJunction::add_overlap_id() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.PNCJunction.overlap_id)
  return overlap_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
PNCJunction::overlap_id() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.PNCJunction.overlap_id)
  return overlap_id_;
}

// repeated .cvte.hdmap.PassageGroup passage_group = 4;
inline int PNCJunction::passage_group_size() const {
  return passage_group_.size();
}
inline void PNCJunction::clear_passage_group() {
  passage_group_.Clear();
}
inline ::cvte::hdmap::PassageGroup* PNCJunction::mutable_passage_group(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PNCJunction.passage_group)
  return passage_group_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::PassageGroup >*
PNCJunction::mutable_passage_group() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.PNCJunction.passage_group)
  return &passage_group_;
}
inline const ::cvte::hdmap::PassageGroup& PNCJunction::passage_group(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PNCJunction.passage_group)
  return passage_group_.Get(index);
}
inline ::cvte::hdmap::PassageGroup* PNCJunction::add_passage_group() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.PNCJunction.passage_group)
  return passage_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::PassageGroup >&
PNCJunction::passage_group() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.PNCJunction.passage_group)
  return passage_group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace cvte

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cvte::hdmap::Passage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cvte::hdmap::Passage_Type>() {
  return ::cvte::hdmap::Passage_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_map_5fpnc_5fjunction_2eproto
