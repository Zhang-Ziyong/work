// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_overlap.proto

#include "map_overlap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
}  // namespace protobuf_map_5fgeometry_2eproto
namespace protobuf_map_5fid_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Id;
}  // namespace protobuf_map_5fid_2eproto
namespace protobuf_map_5foverlap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClearAreaOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JunctionOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PNCJunctionOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParkingSpaceOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RSUOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignalOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeedBumpOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StopSignOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_YieldOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<12> scc_info_ObjectOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CrosswalkOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneOverlapInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RegionOverlapInfo;
}  // namespace protobuf_map_5foverlap_2eproto
namespace cvte {
namespace hdmap {
class LaneOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneOverlapInfo>
      _instance;
} _LaneOverlapInfo_default_instance_;
class SignalOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalOverlapInfo>
      _instance;
} _SignalOverlapInfo_default_instance_;
class StopSignOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopSignOverlapInfo>
      _instance;
} _StopSignOverlapInfo_default_instance_;
class CrosswalkOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrosswalkOverlapInfo>
      _instance;
} _CrosswalkOverlapInfo_default_instance_;
class JunctionOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JunctionOverlapInfo>
      _instance;
} _JunctionOverlapInfo_default_instance_;
class YieldOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YieldOverlapInfo>
      _instance;
} _YieldOverlapInfo_default_instance_;
class ClearAreaOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClearAreaOverlapInfo>
      _instance;
} _ClearAreaOverlapInfo_default_instance_;
class SpeedBumpOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedBumpOverlapInfo>
      _instance;
} _SpeedBumpOverlapInfo_default_instance_;
class ParkingSpaceOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingSpaceOverlapInfo>
      _instance;
} _ParkingSpaceOverlapInfo_default_instance_;
class PNCJunctionOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PNCJunctionOverlapInfo>
      _instance;
} _PNCJunctionOverlapInfo_default_instance_;
class RSUOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RSUOverlapInfo>
      _instance;
} _RSUOverlapInfo_default_instance_;
class RegionOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionOverlapInfo>
      _instance;
} _RegionOverlapInfo_default_instance_;
class ObjectOverlapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectOverlapInfo>
      _instance;
  const ::cvte::hdmap::LaneOverlapInfo* lane_overlap_info_;
  const ::cvte::hdmap::SignalOverlapInfo* signal_overlap_info_;
  const ::cvte::hdmap::StopSignOverlapInfo* stop_sign_overlap_info_;
  const ::cvte::hdmap::CrosswalkOverlapInfo* crosswalk_overlap_info_;
  const ::cvte::hdmap::JunctionOverlapInfo* junction_overlap_info_;
  const ::cvte::hdmap::YieldOverlapInfo* yield_sign_overlap_info_;
  const ::cvte::hdmap::ClearAreaOverlapInfo* clear_area_overlap_info_;
  const ::cvte::hdmap::SpeedBumpOverlapInfo* speed_bump_overlap_info_;
  const ::cvte::hdmap::ParkingSpaceOverlapInfo* parking_space_overlap_info_;
  const ::cvte::hdmap::PNCJunctionOverlapInfo* pnc_junction_overlap_info_;
  const ::cvte::hdmap::RSUOverlapInfo* rsu_overlap_info_;
} _ObjectOverlapInfo_default_instance_;
class OverlapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Overlap>
      _instance;
} _Overlap_default_instance_;
}  // namespace hdmap
}  // namespace cvte
namespace protobuf_map_5foverlap_2eproto {
static void InitDefaultsLaneOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_LaneOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::LaneOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::LaneOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneOverlapInfo}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,}};

static void InitDefaultsSignalOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_SignalOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::SignalOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::SignalOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignalOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignalOverlapInfo}, {}};

static void InitDefaultsStopSignOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_StopSignOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::StopSignOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::StopSignOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopSignOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopSignOverlapInfo}, {}};

static void InitDefaultsCrosswalkOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_CrosswalkOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::CrosswalkOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::CrosswalkOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CrosswalkOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCrosswalkOverlapInfo}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,}};

static void InitDefaultsJunctionOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_JunctionOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::JunctionOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::JunctionOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JunctionOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJunctionOverlapInfo}, {}};

static void InitDefaultsYieldOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_YieldOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::YieldOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::YieldOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_YieldOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsYieldOverlapInfo}, {}};

static void InitDefaultsClearAreaOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_ClearAreaOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::ClearAreaOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::ClearAreaOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClearAreaOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClearAreaOverlapInfo}, {}};

static void InitDefaultsSpeedBumpOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_SpeedBumpOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::SpeedBumpOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::SpeedBumpOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeedBumpOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeedBumpOverlapInfo}, {}};

static void InitDefaultsParkingSpaceOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_ParkingSpaceOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::ParkingSpaceOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::ParkingSpaceOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ParkingSpaceOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParkingSpaceOverlapInfo}, {}};

static void InitDefaultsPNCJunctionOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_PNCJunctionOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::PNCJunctionOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::PNCJunctionOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PNCJunctionOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPNCJunctionOverlapInfo}, {}};

static void InitDefaultsRSUOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_RSUOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::RSUOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::RSUOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RSUOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRSUOverlapInfo}, {}};

static void InitDefaultsRegionOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_RegionOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::RegionOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::RegionOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RegionOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRegionOverlapInfo}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,
      &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,}};

static void InitDefaultsObjectOverlapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_ObjectOverlapInfo_default_instance_;
    new (ptr) ::cvte::hdmap::ObjectOverlapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::ObjectOverlapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_ObjectOverlapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsObjectOverlapInfo}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,
      &protobuf_map_5foverlap_2eproto::scc_info_LaneOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_SignalOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_StopSignOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_CrosswalkOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_JunctionOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_YieldOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_ClearAreaOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_SpeedBumpOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_ParkingSpaceOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_PNCJunctionOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_RSUOverlapInfo.base,}};

static void InitDefaultsOverlap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_Overlap_default_instance_;
    new (ptr) ::cvte::hdmap::Overlap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::Overlap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Overlap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOverlap}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,
      &protobuf_map_5foverlap_2eproto::scc_info_ObjectOverlapInfo.base,
      &protobuf_map_5foverlap_2eproto::scc_info_RegionOverlapInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LaneOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopSignOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrosswalkOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JunctionOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_YieldOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClearAreaOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedBumpOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParkingSpaceOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PNCJunctionOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RSUOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObjectOverlapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Overlap.base);
}

::google::protobuf::Metadata file_level_metadata[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::LaneOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::LaneOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::LaneOverlapInfo, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::LaneOverlapInfo, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::LaneOverlapInfo, is_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::LaneOverlapInfo, region_overlap_id_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SignalOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SignalOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::StopSignOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::StopSignOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CrosswalkOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CrosswalkOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CrosswalkOverlapInfo, region_overlap_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::JunctionOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::JunctionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::YieldOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::YieldOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ClearAreaOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ClearAreaOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBumpOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBumpOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ParkingSpaceOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ParkingSpaceOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PNCJunctionOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PNCJunctionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::RSUOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::RSUOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::RegionOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::RegionOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::RegionOverlapInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::RegionOverlapInfo, polygon_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ObjectOverlapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ObjectOverlapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ObjectOverlapInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ObjectOverlapInfo, id_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, lane_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, signal_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, stop_sign_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, crosswalk_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, junction_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, yield_sign_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, clear_area_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, speed_bump_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, parking_space_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, pnc_junction_overlap_info_),
  offsetof(::cvte::hdmap::ObjectOverlapInfoDefaultTypeInternal, rsu_overlap_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::ObjectOverlapInfo, overlap_info_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Overlap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Overlap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Overlap, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Overlap, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Overlap, region_overlap_),
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::cvte::hdmap::LaneOverlapInfo)},
  { 13, 18, sizeof(::cvte::hdmap::SignalOverlapInfo)},
  { 18, 23, sizeof(::cvte::hdmap::StopSignOverlapInfo)},
  { 23, 29, sizeof(::cvte::hdmap::CrosswalkOverlapInfo)},
  { 30, 35, sizeof(::cvte::hdmap::JunctionOverlapInfo)},
  { 35, 40, sizeof(::cvte::hdmap::YieldOverlapInfo)},
  { 40, 45, sizeof(::cvte::hdmap::ClearAreaOverlapInfo)},
  { 45, 50, sizeof(::cvte::hdmap::SpeedBumpOverlapInfo)},
  { 50, 55, sizeof(::cvte::hdmap::ParkingSpaceOverlapInfo)},
  { 55, 60, sizeof(::cvte::hdmap::PNCJunctionOverlapInfo)},
  { 60, 65, sizeof(::cvte::hdmap::RSUOverlapInfo)},
  { 65, 72, sizeof(::cvte::hdmap::RegionOverlapInfo)},
  { 74, 92, sizeof(::cvte::hdmap::ObjectOverlapInfo)},
  { 104, 112, sizeof(::cvte::hdmap::Overlap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_LaneOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_SignalOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_StopSignOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_CrosswalkOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_JunctionOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_YieldOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_ClearAreaOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_SpeedBumpOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_ParkingSpaceOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_PNCJunctionOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_RSUOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_RegionOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_ObjectOverlapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_Overlap_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "map_overlap.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021map_overlap.proto\022\ncvte.hdmap\032\014map_id."
      "proto\032\022map_geometry.proto\"n\n\017LaneOverlap"
      "Info\022\017\n\007start_s\030\001 \001(\001\022\r\n\005end_s\030\002 \001(\001\022\020\n\010"
      "is_merge\030\003 \001(\010\022)\n\021region_overlap_id\030\004 \001("
      "\0132\016.cvte.hdmap.Id\"\023\n\021SignalOverlapInfo\"\025"
      "\n\023StopSignOverlapInfo\"A\n\024CrosswalkOverla"
      "pInfo\022)\n\021region_overlap_id\030\001 \001(\0132\016.cvte."
      "hdmap.Id\"\025\n\023JunctionOverlapInfo\"\022\n\020Yield"
      "OverlapInfo\"\026\n\024ClearAreaOverlapInfo\"\026\n\024S"
      "peedBumpOverlapInfo\"\031\n\027ParkingSpaceOverl"
      "apInfo\"\030\n\026PNCJunctionOverlapInfo\"\020\n\016RSUO"
      "verlapInfo\"U\n\021RegionOverlapInfo\022\032\n\002id\030\001 "
      "\001(\0132\016.cvte.hdmap.Id\022$\n\007polygon\030\002 \003(\0132\023.c"
      "vte.hdmap.Polygon\"\227\006\n\021ObjectOverlapInfo\022"
      "\032\n\002id\030\001 \001(\0132\016.cvte.hdmap.Id\0228\n\021lane_over"
      "lap_info\030\003 \001(\0132\033.cvte.hdmap.LaneOverlapI"
      "nfoH\000\022<\n\023signal_overlap_info\030\004 \001(\0132\035.cvt"
      "e.hdmap.SignalOverlapInfoH\000\022A\n\026stop_sign"
      "_overlap_info\030\005 \001(\0132\037.cvte.hdmap.StopSig"
      "nOverlapInfoH\000\022B\n\026crosswalk_overlap_info"
      "\030\006 \001(\0132 .cvte.hdmap.CrosswalkOverlapInfo"
      "H\000\022@\n\025junction_overlap_info\030\007 \001(\0132\037.cvte"
      ".hdmap.JunctionOverlapInfoH\000\022\?\n\027yield_si"
      "gn_overlap_info\030\010 \001(\0132\034.cvte.hdmap.Yield"
      "OverlapInfoH\000\022C\n\027clear_area_overlap_info"
      "\030\t \001(\0132 .cvte.hdmap.ClearAreaOverlapInfo"
      "H\000\022C\n\027speed_bump_overlap_info\030\n \001(\0132 .cv"
      "te.hdmap.SpeedBumpOverlapInfoH\000\022I\n\032parki"
      "ng_space_overlap_info\030\013 \001(\0132#.cvte.hdmap"
      ".ParkingSpaceOverlapInfoH\000\022G\n\031pnc_juncti"
      "on_overlap_info\030\014 \001(\0132\".cvte.hdmap.PNCJu"
      "nctionOverlapInfoH\000\0226\n\020rsu_overlap_info\030"
      "\r \001(\0132\032.cvte.hdmap.RSUOverlapInfoH\000B\016\n\014o"
      "verlap_info\"\213\001\n\007Overlap\022\032\n\002id\030\001 \001(\0132\016.cv"
      "te.hdmap.Id\022-\n\006object\030\002 \003(\0132\035.cvte.hdmap"
      ".ObjectOverlapInfo\0225\n\016region_overlap\030\003 \003"
      "(\0132\035.cvte.hdmap.RegionOverlapInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1473);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_overlap.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fid_2eproto::AddDescriptors();
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5foverlap_2eproto
namespace cvte {
namespace hdmap {

// ===================================================================

void LaneOverlapInfo::InitAsDefaultInstance() {
  ::cvte::hdmap::_LaneOverlapInfo_default_instance_._instance.get_mutable()->region_overlap_id_ = const_cast< ::cvte::hdmap::Id*>(
      ::cvte::hdmap::Id::internal_default_instance());
}
void LaneOverlapInfo::clear_region_overlap_id() {
  if (region_overlap_id_ != NULL) region_overlap_id_->Clear();
  clear_has_region_overlap_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneOverlapInfo::kStartSFieldNumber;
const int LaneOverlapInfo::kEndSFieldNumber;
const int LaneOverlapInfo::kIsMergeFieldNumber;
const int LaneOverlapInfo::kRegionOverlapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneOverlapInfo::LaneOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_LaneOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.LaneOverlapInfo)
}
LaneOverlapInfo::LaneOverlapInfo(const LaneOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_overlap_id()) {
    region_overlap_id_ = new ::cvte::hdmap::Id(*from.region_overlap_id_);
  } else {
    region_overlap_id_ = NULL;
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_merge_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(is_merge_));
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.LaneOverlapInfo)
}

void LaneOverlapInfo::SharedCtor() {
  ::memset(&region_overlap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_merge_) -
      reinterpret_cast<char*>(&region_overlap_id_)) + sizeof(is_merge_));
}

LaneOverlapInfo::~LaneOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.LaneOverlapInfo)
  SharedDtor();
}

void LaneOverlapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete region_overlap_id_;
}

void LaneOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneOverlapInfo& LaneOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_LaneOverlapInfo.base);
  return *internal_default_instance();
}


void LaneOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.LaneOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_overlap_id_ != NULL);
    region_overlap_id_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_merge_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(is_merge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.LaneOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_merge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_merge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_merge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Id region_overlap_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.LaneOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.LaneOverlapInfo)
  return false;
#undef DO_
}

void LaneOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.LaneOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_s(), output);
  }

  // optional double end_s = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end_s(), output);
  }

  // optional bool is_merge = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_merge(), output);
  }

  // optional .cvte.hdmap.Id region_overlap_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_region_overlap_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.LaneOverlapInfo)
}

::google::protobuf::uint8* LaneOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.LaneOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_s(), target);
  }

  // optional double end_s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end_s(), target);
  }

  // optional bool is_merge = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_merge(), target);
  }

  // optional .cvte.hdmap.Id region_overlap_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_region_overlap_id(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.LaneOverlapInfo)
  return target;
}

size_t LaneOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.LaneOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .cvte.hdmap.Id region_overlap_id = 4;
    if (has_region_overlap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *region_overlap_id_);
    }

    // optional double start_s = 1;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 2;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional bool is_merge = 3;
    if (has_is_merge()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.LaneOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.LaneOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.LaneOverlapInfo)
    MergeFrom(*source);
  }
}

void LaneOverlapInfo::MergeFrom(const LaneOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.LaneOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region_overlap_id()->::cvte::hdmap::Id::MergeFrom(from.region_overlap_id());
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_merge_ = from.is_merge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.LaneOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneOverlapInfo::CopyFrom(const LaneOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.LaneOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneOverlapInfo::IsInitialized() const {
  return true;
}

void LaneOverlapInfo::Swap(LaneOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneOverlapInfo::InternalSwap(LaneOverlapInfo* other) {
  using std::swap;
  swap(region_overlap_id_, other->region_overlap_id_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(is_merge_, other->is_merge_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignalOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalOverlapInfo::SignalOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_SignalOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.SignalOverlapInfo)
}
SignalOverlapInfo::SignalOverlapInfo(const SignalOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.SignalOverlapInfo)
}

void SignalOverlapInfo::SharedCtor() {
}

SignalOverlapInfo::~SignalOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.SignalOverlapInfo)
  SharedDtor();
}

void SignalOverlapInfo::SharedDtor() {
}

void SignalOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignalOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalOverlapInfo& SignalOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_SignalOverlapInfo.base);
  return *internal_default_instance();
}


void SignalOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.SignalOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignalOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.SignalOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.SignalOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.SignalOverlapInfo)
  return false;
#undef DO_
}

void SignalOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.SignalOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.SignalOverlapInfo)
}

::google::protobuf::uint8* SignalOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.SignalOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.SignalOverlapInfo)
  return target;
}

size_t SignalOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.SignalOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.SignalOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.SignalOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.SignalOverlapInfo)
    MergeFrom(*source);
  }
}

void SignalOverlapInfo::MergeFrom(const SignalOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.SignalOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SignalOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.SignalOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalOverlapInfo::CopyFrom(const SignalOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.SignalOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalOverlapInfo::IsInitialized() const {
  return true;
}

void SignalOverlapInfo::Swap(SignalOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalOverlapInfo::InternalSwap(SignalOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignalOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopSignOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSignOverlapInfo::StopSignOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_StopSignOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.StopSignOverlapInfo)
}
StopSignOverlapInfo::StopSignOverlapInfo(const StopSignOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.StopSignOverlapInfo)
}

void StopSignOverlapInfo::SharedCtor() {
}

StopSignOverlapInfo::~StopSignOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.StopSignOverlapInfo)
  SharedDtor();
}

void StopSignOverlapInfo::SharedDtor() {
}

void StopSignOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopSignOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopSignOverlapInfo& StopSignOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_StopSignOverlapInfo.base);
  return *internal_default_instance();
}


void StopSignOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.StopSignOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopSignOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.StopSignOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.StopSignOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.StopSignOverlapInfo)
  return false;
#undef DO_
}

void StopSignOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.StopSignOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.StopSignOverlapInfo)
}

::google::protobuf::uint8* StopSignOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.StopSignOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.StopSignOverlapInfo)
  return target;
}

size_t StopSignOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.StopSignOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSignOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.StopSignOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSignOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSignOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.StopSignOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.StopSignOverlapInfo)
    MergeFrom(*source);
  }
}

void StopSignOverlapInfo::MergeFrom(const StopSignOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.StopSignOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopSignOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.StopSignOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignOverlapInfo::CopyFrom(const StopSignOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.StopSignOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignOverlapInfo::IsInitialized() const {
  return true;
}

void StopSignOverlapInfo::Swap(StopSignOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSignOverlapInfo::InternalSwap(StopSignOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopSignOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CrosswalkOverlapInfo::InitAsDefaultInstance() {
  ::cvte::hdmap::_CrosswalkOverlapInfo_default_instance_._instance.get_mutable()->region_overlap_id_ = const_cast< ::cvte::hdmap::Id*>(
      ::cvte::hdmap::Id::internal_default_instance());
}
void CrosswalkOverlapInfo::clear_region_overlap_id() {
  if (region_overlap_id_ != NULL) region_overlap_id_->Clear();
  clear_has_region_overlap_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrosswalkOverlapInfo::kRegionOverlapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrosswalkOverlapInfo::CrosswalkOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_CrosswalkOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.CrosswalkOverlapInfo)
}
CrosswalkOverlapInfo::CrosswalkOverlapInfo(const CrosswalkOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_overlap_id()) {
    region_overlap_id_ = new ::cvte::hdmap::Id(*from.region_overlap_id_);
  } else {
    region_overlap_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.CrosswalkOverlapInfo)
}

void CrosswalkOverlapInfo::SharedCtor() {
  region_overlap_id_ = NULL;
}

CrosswalkOverlapInfo::~CrosswalkOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.CrosswalkOverlapInfo)
  SharedDtor();
}

void CrosswalkOverlapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete region_overlap_id_;
}

void CrosswalkOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CrosswalkOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrosswalkOverlapInfo& CrosswalkOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_CrosswalkOverlapInfo.base);
  return *internal_default_instance();
}


void CrosswalkOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.CrosswalkOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_overlap_id_ != NULL);
    region_overlap_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrosswalkOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.CrosswalkOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id region_overlap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.CrosswalkOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.CrosswalkOverlapInfo)
  return false;
#undef DO_
}

void CrosswalkOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.CrosswalkOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id region_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_region_overlap_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.CrosswalkOverlapInfo)
}

::google::protobuf::uint8* CrosswalkOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.CrosswalkOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id region_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_region_overlap_id(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.CrosswalkOverlapInfo)
  return target;
}

size_t CrosswalkOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.CrosswalkOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .cvte.hdmap.Id region_overlap_id = 1;
  if (has_region_overlap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_overlap_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrosswalkOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.CrosswalkOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrosswalkOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.CrosswalkOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.CrosswalkOverlapInfo)
    MergeFrom(*source);
  }
}

void CrosswalkOverlapInfo::MergeFrom(const CrosswalkOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.CrosswalkOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_overlap_id()) {
    mutable_region_overlap_id()->::cvte::hdmap::Id::MergeFrom(from.region_overlap_id());
  }
}

void CrosswalkOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.CrosswalkOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkOverlapInfo::CopyFrom(const CrosswalkOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.CrosswalkOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkOverlapInfo::IsInitialized() const {
  return true;
}

void CrosswalkOverlapInfo::Swap(CrosswalkOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrosswalkOverlapInfo::InternalSwap(CrosswalkOverlapInfo* other) {
  using std::swap;
  swap(region_overlap_id_, other->region_overlap_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CrosswalkOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JunctionOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JunctionOverlapInfo::JunctionOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_JunctionOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.JunctionOverlapInfo)
}
JunctionOverlapInfo::JunctionOverlapInfo(const JunctionOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.JunctionOverlapInfo)
}

void JunctionOverlapInfo::SharedCtor() {
}

JunctionOverlapInfo::~JunctionOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.JunctionOverlapInfo)
  SharedDtor();
}

void JunctionOverlapInfo::SharedDtor() {
}

void JunctionOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JunctionOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JunctionOverlapInfo& JunctionOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_JunctionOverlapInfo.base);
  return *internal_default_instance();
}


void JunctionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.JunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JunctionOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.JunctionOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.JunctionOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.JunctionOverlapInfo)
  return false;
#undef DO_
}

void JunctionOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.JunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.JunctionOverlapInfo)
}

::google::protobuf::uint8* JunctionOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.JunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.JunctionOverlapInfo)
  return target;
}

size_t JunctionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.JunctionOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JunctionOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.JunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const JunctionOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JunctionOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.JunctionOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.JunctionOverlapInfo)
    MergeFrom(*source);
  }
}

void JunctionOverlapInfo::MergeFrom(const JunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.JunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void JunctionOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.JunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunctionOverlapInfo::CopyFrom(const JunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.JunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionOverlapInfo::IsInitialized() const {
  return true;
}

void JunctionOverlapInfo::Swap(JunctionOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JunctionOverlapInfo::InternalSwap(JunctionOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JunctionOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void YieldOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YieldOverlapInfo::YieldOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_YieldOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.YieldOverlapInfo)
}
YieldOverlapInfo::YieldOverlapInfo(const YieldOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.YieldOverlapInfo)
}

void YieldOverlapInfo::SharedCtor() {
}

YieldOverlapInfo::~YieldOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.YieldOverlapInfo)
  SharedDtor();
}

void YieldOverlapInfo::SharedDtor() {
}

void YieldOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* YieldOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YieldOverlapInfo& YieldOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_YieldOverlapInfo.base);
  return *internal_default_instance();
}


void YieldOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.YieldOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YieldOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.YieldOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.YieldOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.YieldOverlapInfo)
  return false;
#undef DO_
}

void YieldOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.YieldOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.YieldOverlapInfo)
}

::google::protobuf::uint8* YieldOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.YieldOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.YieldOverlapInfo)
  return target;
}

size_t YieldOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.YieldOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YieldOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.YieldOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const YieldOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YieldOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.YieldOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.YieldOverlapInfo)
    MergeFrom(*source);
  }
}

void YieldOverlapInfo::MergeFrom(const YieldOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.YieldOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void YieldOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.YieldOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YieldOverlapInfo::CopyFrom(const YieldOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.YieldOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YieldOverlapInfo::IsInitialized() const {
  return true;
}

void YieldOverlapInfo::Swap(YieldOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YieldOverlapInfo::InternalSwap(YieldOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata YieldOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClearAreaOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearAreaOverlapInfo::ClearAreaOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_ClearAreaOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.ClearAreaOverlapInfo)
}
ClearAreaOverlapInfo::ClearAreaOverlapInfo(const ClearAreaOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.ClearAreaOverlapInfo)
}

void ClearAreaOverlapInfo::SharedCtor() {
}

ClearAreaOverlapInfo::~ClearAreaOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.ClearAreaOverlapInfo)
  SharedDtor();
}

void ClearAreaOverlapInfo::SharedDtor() {
}

void ClearAreaOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClearAreaOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClearAreaOverlapInfo& ClearAreaOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_ClearAreaOverlapInfo.base);
  return *internal_default_instance();
}


void ClearAreaOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.ClearAreaOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClearAreaOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.ClearAreaOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.ClearAreaOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.ClearAreaOverlapInfo)
  return false;
#undef DO_
}

void ClearAreaOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.ClearAreaOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.ClearAreaOverlapInfo)
}

::google::protobuf::uint8* ClearAreaOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.ClearAreaOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.ClearAreaOverlapInfo)
  return target;
}

size_t ClearAreaOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.ClearAreaOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearAreaOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.ClearAreaOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearAreaOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearAreaOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.ClearAreaOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.ClearAreaOverlapInfo)
    MergeFrom(*source);
  }
}

void ClearAreaOverlapInfo::MergeFrom(const ClearAreaOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.ClearAreaOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearAreaOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.ClearAreaOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearAreaOverlapInfo::CopyFrom(const ClearAreaOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.ClearAreaOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearAreaOverlapInfo::IsInitialized() const {
  return true;
}

void ClearAreaOverlapInfo::Swap(ClearAreaOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearAreaOverlapInfo::InternalSwap(ClearAreaOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClearAreaOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedBumpOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedBumpOverlapInfo::SpeedBumpOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_SpeedBumpOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.SpeedBumpOverlapInfo)
}
SpeedBumpOverlapInfo::SpeedBumpOverlapInfo(const SpeedBumpOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.SpeedBumpOverlapInfo)
}

void SpeedBumpOverlapInfo::SharedCtor() {
}

SpeedBumpOverlapInfo::~SpeedBumpOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.SpeedBumpOverlapInfo)
  SharedDtor();
}

void SpeedBumpOverlapInfo::SharedDtor() {
}

void SpeedBumpOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedBumpOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedBumpOverlapInfo& SpeedBumpOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_SpeedBumpOverlapInfo.base);
  return *internal_default_instance();
}


void SpeedBumpOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.SpeedBumpOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedBumpOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.SpeedBumpOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.SpeedBumpOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.SpeedBumpOverlapInfo)
  return false;
#undef DO_
}

void SpeedBumpOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.SpeedBumpOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.SpeedBumpOverlapInfo)
}

::google::protobuf::uint8* SpeedBumpOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.SpeedBumpOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.SpeedBumpOverlapInfo)
  return target;
}

size_t SpeedBumpOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.SpeedBumpOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedBumpOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.SpeedBumpOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBumpOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedBumpOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.SpeedBumpOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.SpeedBumpOverlapInfo)
    MergeFrom(*source);
  }
}

void SpeedBumpOverlapInfo::MergeFrom(const SpeedBumpOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.SpeedBumpOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SpeedBumpOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.SpeedBumpOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBumpOverlapInfo::CopyFrom(const SpeedBumpOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.SpeedBumpOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBumpOverlapInfo::IsInitialized() const {
  return true;
}

void SpeedBumpOverlapInfo::Swap(SpeedBumpOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedBumpOverlapInfo::InternalSwap(SpeedBumpOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedBumpOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingSpaceOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSpaceOverlapInfo::ParkingSpaceOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_ParkingSpaceOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.ParkingSpaceOverlapInfo)
}
ParkingSpaceOverlapInfo::ParkingSpaceOverlapInfo(const ParkingSpaceOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.ParkingSpaceOverlapInfo)
}

void ParkingSpaceOverlapInfo::SharedCtor() {
}

ParkingSpaceOverlapInfo::~ParkingSpaceOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.ParkingSpaceOverlapInfo)
  SharedDtor();
}

void ParkingSpaceOverlapInfo::SharedDtor() {
}

void ParkingSpaceOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParkingSpaceOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSpaceOverlapInfo& ParkingSpaceOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_ParkingSpaceOverlapInfo.base);
  return *internal_default_instance();
}


void ParkingSpaceOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkingSpaceOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.ParkingSpaceOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.ParkingSpaceOverlapInfo)
  return false;
#undef DO_
}

void ParkingSpaceOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.ParkingSpaceOverlapInfo)
}

::google::protobuf::uint8* ParkingSpaceOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.ParkingSpaceOverlapInfo)
  return target;
}

size_t ParkingSpaceOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingSpaceOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSpaceOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSpaceOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.ParkingSpaceOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.ParkingSpaceOverlapInfo)
    MergeFrom(*source);
  }
}

void ParkingSpaceOverlapInfo::MergeFrom(const ParkingSpaceOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ParkingSpaceOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpaceOverlapInfo::CopyFrom(const ParkingSpaceOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.ParkingSpaceOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpaceOverlapInfo::IsInitialized() const {
  return true;
}

void ParkingSpaceOverlapInfo::Swap(ParkingSpaceOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSpaceOverlapInfo::InternalSwap(ParkingSpaceOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParkingSpaceOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PNCJunctionOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PNCJunctionOverlapInfo::PNCJunctionOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_PNCJunctionOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.PNCJunctionOverlapInfo)
}
PNCJunctionOverlapInfo::PNCJunctionOverlapInfo(const PNCJunctionOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.PNCJunctionOverlapInfo)
}

void PNCJunctionOverlapInfo::SharedCtor() {
}

PNCJunctionOverlapInfo::~PNCJunctionOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.PNCJunctionOverlapInfo)
  SharedDtor();
}

void PNCJunctionOverlapInfo::SharedDtor() {
}

void PNCJunctionOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PNCJunctionOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PNCJunctionOverlapInfo& PNCJunctionOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_PNCJunctionOverlapInfo.base);
  return *internal_default_instance();
}


void PNCJunctionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.PNCJunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PNCJunctionOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.PNCJunctionOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.PNCJunctionOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.PNCJunctionOverlapInfo)
  return false;
#undef DO_
}

void PNCJunctionOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.PNCJunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.PNCJunctionOverlapInfo)
}

::google::protobuf::uint8* PNCJunctionOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.PNCJunctionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.PNCJunctionOverlapInfo)
  return target;
}

size_t PNCJunctionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.PNCJunctionOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNCJunctionOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.PNCJunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PNCJunctionOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PNCJunctionOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.PNCJunctionOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.PNCJunctionOverlapInfo)
    MergeFrom(*source);
  }
}

void PNCJunctionOverlapInfo::MergeFrom(const PNCJunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.PNCJunctionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PNCJunctionOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.PNCJunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNCJunctionOverlapInfo::CopyFrom(const PNCJunctionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.PNCJunctionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNCJunctionOverlapInfo::IsInitialized() const {
  return true;
}

void PNCJunctionOverlapInfo::Swap(PNCJunctionOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PNCJunctionOverlapInfo::InternalSwap(PNCJunctionOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PNCJunctionOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RSUOverlapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSUOverlapInfo::RSUOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_RSUOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.RSUOverlapInfo)
}
RSUOverlapInfo::RSUOverlapInfo(const RSUOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.RSUOverlapInfo)
}

void RSUOverlapInfo::SharedCtor() {
}

RSUOverlapInfo::~RSUOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.RSUOverlapInfo)
  SharedDtor();
}

void RSUOverlapInfo::SharedDtor() {
}

void RSUOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RSUOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RSUOverlapInfo& RSUOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_RSUOverlapInfo.base);
  return *internal_default_instance();
}


void RSUOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.RSUOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RSUOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.RSUOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.RSUOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.RSUOverlapInfo)
  return false;
#undef DO_
}

void RSUOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.RSUOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.RSUOverlapInfo)
}

::google::protobuf::uint8* RSUOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.RSUOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.RSUOverlapInfo)
  return target;
}

size_t RSUOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.RSUOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RSUOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.RSUOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RSUOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSUOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.RSUOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.RSUOverlapInfo)
    MergeFrom(*source);
  }
}

void RSUOverlapInfo::MergeFrom(const RSUOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.RSUOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RSUOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.RSUOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSUOverlapInfo::CopyFrom(const RSUOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.RSUOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSUOverlapInfo::IsInitialized() const {
  return true;
}

void RSUOverlapInfo::Swap(RSUOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSUOverlapInfo::InternalSwap(RSUOverlapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RSUOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegionOverlapInfo::InitAsDefaultInstance() {
  ::cvte::hdmap::_RegionOverlapInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::cvte::hdmap::Id*>(
      ::cvte::hdmap::Id::internal_default_instance());
}
void RegionOverlapInfo::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void RegionOverlapInfo::clear_polygon() {
  polygon_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionOverlapInfo::kIdFieldNumber;
const int RegionOverlapInfo::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionOverlapInfo::RegionOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_RegionOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.RegionOverlapInfo)
}
RegionOverlapInfo::RegionOverlapInfo(const RegionOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      polygon_(from.polygon_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.RegionOverlapInfo)
}

void RegionOverlapInfo::SharedCtor() {
  id_ = NULL;
}

RegionOverlapInfo::~RegionOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.RegionOverlapInfo)
  SharedDtor();
}

void RegionOverlapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void RegionOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegionOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionOverlapInfo& RegionOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_RegionOverlapInfo.base);
  return *internal_default_instance();
}


void RegionOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.RegionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.RegionOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.RegionOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.RegionOverlapInfo)
  return false;
#undef DO_
}

void RegionOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.RegionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // repeated .cvte.hdmap.Polygon polygon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->polygon(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.RegionOverlapInfo)
}

::google::protobuf::uint8* RegionOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.RegionOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // repeated .cvte.hdmap.Polygon polygon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->polygon(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.RegionOverlapInfo)
  return target;
}

size_t RegionOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.RegionOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cvte.hdmap.Polygon polygon = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon(static_cast<int>(i)));
    }
  }

  // optional .cvte.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.RegionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.RegionOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.RegionOverlapInfo)
    MergeFrom(*source);
  }
}

void RegionOverlapInfo::MergeFrom(const RegionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.RegionOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  if (from.has_id()) {
    mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
  }
}

void RegionOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.RegionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionOverlapInfo::CopyFrom(const RegionOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.RegionOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionOverlapInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->polygon())) return false;
  return true;
}

void RegionOverlapInfo::Swap(RegionOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionOverlapInfo::InternalSwap(RegionOverlapInfo* other) {
  using std::swap;
  CastToBase(&polygon_)->InternalSwap(CastToBase(&other->polygon_));
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegionOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectOverlapInfo::InitAsDefaultInstance() {
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::cvte::hdmap::Id*>(
      ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.lane_overlap_info_ = const_cast< ::cvte::hdmap::LaneOverlapInfo*>(
      ::cvte::hdmap::LaneOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.signal_overlap_info_ = const_cast< ::cvte::hdmap::SignalOverlapInfo*>(
      ::cvte::hdmap::SignalOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.stop_sign_overlap_info_ = const_cast< ::cvte::hdmap::StopSignOverlapInfo*>(
      ::cvte::hdmap::StopSignOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.crosswalk_overlap_info_ = const_cast< ::cvte::hdmap::CrosswalkOverlapInfo*>(
      ::cvte::hdmap::CrosswalkOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.junction_overlap_info_ = const_cast< ::cvte::hdmap::JunctionOverlapInfo*>(
      ::cvte::hdmap::JunctionOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.yield_sign_overlap_info_ = const_cast< ::cvte::hdmap::YieldOverlapInfo*>(
      ::cvte::hdmap::YieldOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.clear_area_overlap_info_ = const_cast< ::cvte::hdmap::ClearAreaOverlapInfo*>(
      ::cvte::hdmap::ClearAreaOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.speed_bump_overlap_info_ = const_cast< ::cvte::hdmap::SpeedBumpOverlapInfo*>(
      ::cvte::hdmap::SpeedBumpOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.parking_space_overlap_info_ = const_cast< ::cvte::hdmap::ParkingSpaceOverlapInfo*>(
      ::cvte::hdmap::ParkingSpaceOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.pnc_junction_overlap_info_ = const_cast< ::cvte::hdmap::PNCJunctionOverlapInfo*>(
      ::cvte::hdmap::PNCJunctionOverlapInfo::internal_default_instance());
  ::cvte::hdmap::_ObjectOverlapInfo_default_instance_.rsu_overlap_info_ = const_cast< ::cvte::hdmap::RSUOverlapInfo*>(
      ::cvte::hdmap::RSUOverlapInfo::internal_default_instance());
}
void ObjectOverlapInfo::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void ObjectOverlapInfo::set_allocated_lane_overlap_info(::cvte::hdmap::LaneOverlapInfo* lane_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (lane_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_overlap_info, submessage_arena);
    }
    set_has_lane_overlap_info();
    overlap_info_.lane_overlap_info_ = lane_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.lane_overlap_info)
}
void ObjectOverlapInfo::set_allocated_signal_overlap_info(::cvte::hdmap::SignalOverlapInfo* signal_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (signal_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signal_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signal_overlap_info, submessage_arena);
    }
    set_has_signal_overlap_info();
    overlap_info_.signal_overlap_info_ = signal_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.signal_overlap_info)
}
void ObjectOverlapInfo::set_allocated_stop_sign_overlap_info(::cvte::hdmap::StopSignOverlapInfo* stop_sign_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (stop_sign_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_sign_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_sign_overlap_info, submessage_arena);
    }
    set_has_stop_sign_overlap_info();
    overlap_info_.stop_sign_overlap_info_ = stop_sign_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.stop_sign_overlap_info)
}
void ObjectOverlapInfo::set_allocated_crosswalk_overlap_info(::cvte::hdmap::CrosswalkOverlapInfo* crosswalk_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (crosswalk_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crosswalk_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crosswalk_overlap_info, submessage_arena);
    }
    set_has_crosswalk_overlap_info();
    overlap_info_.crosswalk_overlap_info_ = crosswalk_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.crosswalk_overlap_info)
}
void ObjectOverlapInfo::set_allocated_junction_overlap_info(::cvte::hdmap::JunctionOverlapInfo* junction_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (junction_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      junction_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, junction_overlap_info, submessage_arena);
    }
    set_has_junction_overlap_info();
    overlap_info_.junction_overlap_info_ = junction_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.junction_overlap_info)
}
void ObjectOverlapInfo::set_allocated_yield_sign_overlap_info(::cvte::hdmap::YieldOverlapInfo* yield_sign_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (yield_sign_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yield_sign_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yield_sign_overlap_info, submessage_arena);
    }
    set_has_yield_sign_overlap_info();
    overlap_info_.yield_sign_overlap_info_ = yield_sign_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.yield_sign_overlap_info)
}
void ObjectOverlapInfo::set_allocated_clear_area_overlap_info(::cvte::hdmap::ClearAreaOverlapInfo* clear_area_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (clear_area_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clear_area_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clear_area_overlap_info, submessage_arena);
    }
    set_has_clear_area_overlap_info();
    overlap_info_.clear_area_overlap_info_ = clear_area_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.clear_area_overlap_info)
}
void ObjectOverlapInfo::set_allocated_speed_bump_overlap_info(::cvte::hdmap::SpeedBumpOverlapInfo* speed_bump_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (speed_bump_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_bump_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_bump_overlap_info, submessage_arena);
    }
    set_has_speed_bump_overlap_info();
    overlap_info_.speed_bump_overlap_info_ = speed_bump_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.speed_bump_overlap_info)
}
void ObjectOverlapInfo::set_allocated_parking_space_overlap_info(::cvte::hdmap::ParkingSpaceOverlapInfo* parking_space_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (parking_space_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parking_space_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parking_space_overlap_info, submessage_arena);
    }
    set_has_parking_space_overlap_info();
    overlap_info_.parking_space_overlap_info_ = parking_space_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.parking_space_overlap_info)
}
void ObjectOverlapInfo::set_allocated_pnc_junction_overlap_info(::cvte::hdmap::PNCJunctionOverlapInfo* pnc_junction_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (pnc_junction_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pnc_junction_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pnc_junction_overlap_info, submessage_arena);
    }
    set_has_pnc_junction_overlap_info();
    overlap_info_.pnc_junction_overlap_info_ = pnc_junction_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.pnc_junction_overlap_info)
}
void ObjectOverlapInfo::set_allocated_rsu_overlap_info(::cvte::hdmap::RSUOverlapInfo* rsu_overlap_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_overlap_info();
  if (rsu_overlap_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rsu_overlap_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rsu_overlap_info, submessage_arena);
    }
    set_has_rsu_overlap_info();
    overlap_info_.rsu_overlap_info_ = rsu_overlap_info;
  }
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ObjectOverlapInfo.rsu_overlap_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectOverlapInfo::kIdFieldNumber;
const int ObjectOverlapInfo::kLaneOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kSignalOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kStopSignOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kCrosswalkOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kJunctionOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kYieldSignOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kClearAreaOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kSpeedBumpOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kParkingSpaceOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kPncJunctionOverlapInfoFieldNumber;
const int ObjectOverlapInfo::kRsuOverlapInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectOverlapInfo::ObjectOverlapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_ObjectOverlapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.ObjectOverlapInfo)
}
ObjectOverlapInfo::ObjectOverlapInfo(const ObjectOverlapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  clear_has_overlap_info();
  switch (from.overlap_info_case()) {
    case kLaneOverlapInfo: {
      mutable_lane_overlap_info()->::cvte::hdmap::LaneOverlapInfo::MergeFrom(from.lane_overlap_info());
      break;
    }
    case kSignalOverlapInfo: {
      mutable_signal_overlap_info()->::cvte::hdmap::SignalOverlapInfo::MergeFrom(from.signal_overlap_info());
      break;
    }
    case kStopSignOverlapInfo: {
      mutable_stop_sign_overlap_info()->::cvte::hdmap::StopSignOverlapInfo::MergeFrom(from.stop_sign_overlap_info());
      break;
    }
    case kCrosswalkOverlapInfo: {
      mutable_crosswalk_overlap_info()->::cvte::hdmap::CrosswalkOverlapInfo::MergeFrom(from.crosswalk_overlap_info());
      break;
    }
    case kJunctionOverlapInfo: {
      mutable_junction_overlap_info()->::cvte::hdmap::JunctionOverlapInfo::MergeFrom(from.junction_overlap_info());
      break;
    }
    case kYieldSignOverlapInfo: {
      mutable_yield_sign_overlap_info()->::cvte::hdmap::YieldOverlapInfo::MergeFrom(from.yield_sign_overlap_info());
      break;
    }
    case kClearAreaOverlapInfo: {
      mutable_clear_area_overlap_info()->::cvte::hdmap::ClearAreaOverlapInfo::MergeFrom(from.clear_area_overlap_info());
      break;
    }
    case kSpeedBumpOverlapInfo: {
      mutable_speed_bump_overlap_info()->::cvte::hdmap::SpeedBumpOverlapInfo::MergeFrom(from.speed_bump_overlap_info());
      break;
    }
    case kParkingSpaceOverlapInfo: {
      mutable_parking_space_overlap_info()->::cvte::hdmap::ParkingSpaceOverlapInfo::MergeFrom(from.parking_space_overlap_info());
      break;
    }
    case kPncJunctionOverlapInfo: {
      mutable_pnc_junction_overlap_info()->::cvte::hdmap::PNCJunctionOverlapInfo::MergeFrom(from.pnc_junction_overlap_info());
      break;
    }
    case kRsuOverlapInfo: {
      mutable_rsu_overlap_info()->::cvte::hdmap::RSUOverlapInfo::MergeFrom(from.rsu_overlap_info());
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.ObjectOverlapInfo)
}

void ObjectOverlapInfo::SharedCtor() {
  id_ = NULL;
  clear_has_overlap_info();
}

ObjectOverlapInfo::~ObjectOverlapInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.ObjectOverlapInfo)
  SharedDtor();
}

void ObjectOverlapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (has_overlap_info()) {
    clear_overlap_info();
  }
}

void ObjectOverlapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObjectOverlapInfo::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectOverlapInfo& ObjectOverlapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_ObjectOverlapInfo.base);
  return *internal_default_instance();
}


void ObjectOverlapInfo::clear_overlap_info() {
// @@protoc_insertion_point(one_of_clear_start:cvte.hdmap.ObjectOverlapInfo)
  switch (overlap_info_case()) {
    case kLaneOverlapInfo: {
      delete overlap_info_.lane_overlap_info_;
      break;
    }
    case kSignalOverlapInfo: {
      delete overlap_info_.signal_overlap_info_;
      break;
    }
    case kStopSignOverlapInfo: {
      delete overlap_info_.stop_sign_overlap_info_;
      break;
    }
    case kCrosswalkOverlapInfo: {
      delete overlap_info_.crosswalk_overlap_info_;
      break;
    }
    case kJunctionOverlapInfo: {
      delete overlap_info_.junction_overlap_info_;
      break;
    }
    case kYieldSignOverlapInfo: {
      delete overlap_info_.yield_sign_overlap_info_;
      break;
    }
    case kClearAreaOverlapInfo: {
      delete overlap_info_.clear_area_overlap_info_;
      break;
    }
    case kSpeedBumpOverlapInfo: {
      delete overlap_info_.speed_bump_overlap_info_;
      break;
    }
    case kParkingSpaceOverlapInfo: {
      delete overlap_info_.parking_space_overlap_info_;
      break;
    }
    case kPncJunctionOverlapInfo: {
      delete overlap_info_.pnc_junction_overlap_info_;
      break;
    }
    case kRsuOverlapInfo: {
      delete overlap_info_.rsu_overlap_info_;
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OVERLAP_INFO_NOT_SET;
}


void ObjectOverlapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.ObjectOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  clear_overlap_info();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectOverlapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.ObjectOverlapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.LaneOverlapInfo lane_overlap_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.SignalOverlapInfo signal_overlap_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.StopSignOverlapInfo stop_sign_overlap_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_sign_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.CrosswalkOverlapInfo crosswalk_overlap_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crosswalk_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.JunctionOverlapInfo junction_overlap_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_junction_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.YieldOverlapInfo yield_sign_overlap_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yield_sign_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.ClearAreaOverlapInfo clear_area_overlap_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clear_area_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_bump_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking_space_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pnc_junction_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.RSUOverlapInfo rsu_overlap_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rsu_overlap_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.ObjectOverlapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.ObjectOverlapInfo)
  return false;
#undef DO_
}

void ObjectOverlapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.ObjectOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  switch (overlap_info_case()) {
    case kLaneOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_lane_overlap_info(), output);
      break;
    case kSignalOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_signal_overlap_info(), output);
      break;
    case kStopSignOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_stop_sign_overlap_info(), output);
      break;
    case kCrosswalkOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_crosswalk_overlap_info(), output);
      break;
    case kJunctionOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_junction_overlap_info(), output);
      break;
    case kYieldSignOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_yield_sign_overlap_info(), output);
      break;
    case kClearAreaOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_clear_area_overlap_info(), output);
      break;
    case kSpeedBumpOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_speed_bump_overlap_info(), output);
      break;
    case kParkingSpaceOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_parking_space_overlap_info(), output);
      break;
    case kPncJunctionOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_pnc_junction_overlap_info(), output);
      break;
    case kRsuOverlapInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_rsu_overlap_info(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.ObjectOverlapInfo)
}

::google::protobuf::uint8* ObjectOverlapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.ObjectOverlapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  switch (overlap_info_case()) {
    case kLaneOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_lane_overlap_info(), deterministic, target);
      break;
    case kSignalOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_signal_overlap_info(), deterministic, target);
      break;
    case kStopSignOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_stop_sign_overlap_info(), deterministic, target);
      break;
    case kCrosswalkOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_crosswalk_overlap_info(), deterministic, target);
      break;
    case kJunctionOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_junction_overlap_info(), deterministic, target);
      break;
    case kYieldSignOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_yield_sign_overlap_info(), deterministic, target);
      break;
    case kClearAreaOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_clear_area_overlap_info(), deterministic, target);
      break;
    case kSpeedBumpOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_speed_bump_overlap_info(), deterministic, target);
      break;
    case kParkingSpaceOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_parking_space_overlap_info(), deterministic, target);
      break;
    case kPncJunctionOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_pnc_junction_overlap_info(), deterministic, target);
      break;
    case kRsuOverlapInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_rsu_overlap_info(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.ObjectOverlapInfo)
  return target;
}

size_t ObjectOverlapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.ObjectOverlapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .cvte.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  switch (overlap_info_case()) {
    // optional .cvte.hdmap.LaneOverlapInfo lane_overlap_info = 3;
    case kLaneOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.lane_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.SignalOverlapInfo signal_overlap_info = 4;
    case kSignalOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.signal_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.StopSignOverlapInfo stop_sign_overlap_info = 5;
    case kStopSignOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.stop_sign_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.CrosswalkOverlapInfo crosswalk_overlap_info = 6;
    case kCrosswalkOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.crosswalk_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.JunctionOverlapInfo junction_overlap_info = 7;
    case kJunctionOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.junction_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.YieldOverlapInfo yield_sign_overlap_info = 8;
    case kYieldSignOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.yield_sign_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.ClearAreaOverlapInfo clear_area_overlap_info = 9;
    case kClearAreaOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.clear_area_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
    case kSpeedBumpOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.speed_bump_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
    case kParkingSpaceOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.parking_space_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
    case kPncJunctionOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.pnc_junction_overlap_info_);
      break;
    }
    // optional .cvte.hdmap.RSUOverlapInfo rsu_overlap_info = 13;
    case kRsuOverlapInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *overlap_info_.rsu_overlap_info_);
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectOverlapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.ObjectOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectOverlapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectOverlapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.ObjectOverlapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.ObjectOverlapInfo)
    MergeFrom(*source);
  }
}

void ObjectOverlapInfo::MergeFrom(const ObjectOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.ObjectOverlapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
  }
  switch (from.overlap_info_case()) {
    case kLaneOverlapInfo: {
      mutable_lane_overlap_info()->::cvte::hdmap::LaneOverlapInfo::MergeFrom(from.lane_overlap_info());
      break;
    }
    case kSignalOverlapInfo: {
      mutable_signal_overlap_info()->::cvte::hdmap::SignalOverlapInfo::MergeFrom(from.signal_overlap_info());
      break;
    }
    case kStopSignOverlapInfo: {
      mutable_stop_sign_overlap_info()->::cvte::hdmap::StopSignOverlapInfo::MergeFrom(from.stop_sign_overlap_info());
      break;
    }
    case kCrosswalkOverlapInfo: {
      mutable_crosswalk_overlap_info()->::cvte::hdmap::CrosswalkOverlapInfo::MergeFrom(from.crosswalk_overlap_info());
      break;
    }
    case kJunctionOverlapInfo: {
      mutable_junction_overlap_info()->::cvte::hdmap::JunctionOverlapInfo::MergeFrom(from.junction_overlap_info());
      break;
    }
    case kYieldSignOverlapInfo: {
      mutable_yield_sign_overlap_info()->::cvte::hdmap::YieldOverlapInfo::MergeFrom(from.yield_sign_overlap_info());
      break;
    }
    case kClearAreaOverlapInfo: {
      mutable_clear_area_overlap_info()->::cvte::hdmap::ClearAreaOverlapInfo::MergeFrom(from.clear_area_overlap_info());
      break;
    }
    case kSpeedBumpOverlapInfo: {
      mutable_speed_bump_overlap_info()->::cvte::hdmap::SpeedBumpOverlapInfo::MergeFrom(from.speed_bump_overlap_info());
      break;
    }
    case kParkingSpaceOverlapInfo: {
      mutable_parking_space_overlap_info()->::cvte::hdmap::ParkingSpaceOverlapInfo::MergeFrom(from.parking_space_overlap_info());
      break;
    }
    case kPncJunctionOverlapInfo: {
      mutable_pnc_junction_overlap_info()->::cvte::hdmap::PNCJunctionOverlapInfo::MergeFrom(from.pnc_junction_overlap_info());
      break;
    }
    case kRsuOverlapInfo: {
      mutable_rsu_overlap_info()->::cvte::hdmap::RSUOverlapInfo::MergeFrom(from.rsu_overlap_info());
      break;
    }
    case OVERLAP_INFO_NOT_SET: {
      break;
    }
  }
}

void ObjectOverlapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.ObjectOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOverlapInfo::CopyFrom(const ObjectOverlapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.ObjectOverlapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOverlapInfo::IsInitialized() const {
  return true;
}

void ObjectOverlapInfo::Swap(ObjectOverlapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectOverlapInfo::InternalSwap(ObjectOverlapInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(overlap_info_, other->overlap_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObjectOverlapInfo::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Overlap::InitAsDefaultInstance() {
  ::cvte::hdmap::_Overlap_default_instance_._instance.get_mutable()->id_ = const_cast< ::cvte::hdmap::Id*>(
      ::cvte::hdmap::Id::internal_default_instance());
}
void Overlap::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Overlap::kIdFieldNumber;
const int Overlap::kObjectFieldNumber;
const int Overlap::kRegionOverlapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Overlap::Overlap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5foverlap_2eproto::scc_info_Overlap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.Overlap)
}
Overlap::Overlap(const Overlap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      object_(from.object_),
      region_overlap_(from.region_overlap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.Overlap)
}

void Overlap::SharedCtor() {
  id_ = NULL;
}

Overlap::~Overlap() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.Overlap)
  SharedDtor();
}

void Overlap::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void Overlap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Overlap::descriptor() {
  ::protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Overlap& Overlap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5foverlap_2eproto::scc_info_Overlap.base);
  return *internal_default_instance();
}


void Overlap::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.Overlap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  region_overlap_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Overlap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.Overlap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.ObjectOverlapInfo object = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.RegionOverlapInfo region_overlap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_region_overlap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.Overlap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.Overlap)
  return false;
#undef DO_
}

void Overlap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.Overlap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // repeated .cvte.hdmap.ObjectOverlapInfo object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->object(static_cast<int>(i)),
      output);
  }

  // repeated .cvte.hdmap.RegionOverlapInfo region_overlap = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_overlap_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->region_overlap(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.Overlap)
}

::google::protobuf::uint8* Overlap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.Overlap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // repeated .cvte.hdmap.ObjectOverlapInfo object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cvte.hdmap.RegionOverlapInfo region_overlap = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_overlap_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->region_overlap(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.Overlap)
  return target;
}

size_t Overlap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.Overlap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cvte.hdmap.ObjectOverlapInfo object = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object(static_cast<int>(i)));
    }
  }

  // repeated .cvte.hdmap.RegionOverlapInfo region_overlap = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->region_overlap_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->region_overlap(static_cast<int>(i)));
    }
  }

  // optional .cvte.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Overlap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.Overlap)
  GOOGLE_DCHECK_NE(&from, this);
  const Overlap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Overlap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.Overlap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.Overlap)
    MergeFrom(*source);
  }
}

void Overlap::MergeFrom(const Overlap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.Overlap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  region_overlap_.MergeFrom(from.region_overlap_);
  if (from.has_id()) {
    mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
  }
}

void Overlap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.Overlap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Overlap::CopyFrom(const Overlap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.Overlap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Overlap::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->region_overlap())) return false;
  return true;
}

void Overlap::Swap(Overlap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Overlap::InternalSwap(Overlap* other) {
  using std::swap;
  CastToBase(&object_)->InternalSwap(CastToBase(&other->object_));
  CastToBase(&region_overlap_)->InternalSwap(CastToBase(&other->region_overlap_));
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Overlap::GetMetadata() const {
  protobuf_map_5foverlap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5foverlap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace cvte
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::LaneOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::LaneOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::LaneOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::SignalOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::SignalOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::SignalOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::StopSignOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::StopSignOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::StopSignOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::CrosswalkOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::CrosswalkOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::CrosswalkOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::JunctionOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::JunctionOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::JunctionOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::YieldOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::YieldOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::YieldOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::ClearAreaOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::ClearAreaOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::ClearAreaOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::SpeedBumpOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::SpeedBumpOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::SpeedBumpOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::ParkingSpaceOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::ParkingSpaceOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::ParkingSpaceOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::PNCJunctionOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::PNCJunctionOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::PNCJunctionOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::RSUOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::RSUOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::RSUOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::RegionOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::RegionOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::RegionOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::ObjectOverlapInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::ObjectOverlapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::ObjectOverlapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::Overlap* Arena::CreateMaybeMessage< ::cvte::hdmap::Overlap >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::Overlap >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
