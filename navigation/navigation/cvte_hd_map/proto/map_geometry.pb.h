// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_geometry.proto

#ifndef PROTOBUF_INCLUDED_map_5fgeometry_2eproto
#define PROTOBUF_INCLUDED_map_5fgeometry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto 

namespace protobuf_map_5fgeometry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_map_5fgeometry_2eproto
namespace cvte {
namespace hdmap {
class Curve;
class CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
class CurveSegment;
class CurveSegmentDefaultTypeInternal;
extern CurveSegmentDefaultTypeInternal _CurveSegment_default_instance_;
class LineSegment;
class LineSegmentDefaultTypeInternal;
extern LineSegmentDefaultTypeInternal _LineSegment_default_instance_;
class Point2d;
class Point2dDefaultTypeInternal;
extern Point2dDefaultTypeInternal _Point2d_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
}  // namespace hdmap
}  // namespace cvte
namespace google {
namespace protobuf {
template<> ::cvte::hdmap::Curve* Arena::CreateMaybeMessage<::cvte::hdmap::Curve>(Arena*);
template<> ::cvte::hdmap::CurveSegment* Arena::CreateMaybeMessage<::cvte::hdmap::CurveSegment>(Arena*);
template<> ::cvte::hdmap::LineSegment* Arena::CreateMaybeMessage<::cvte::hdmap::LineSegment>(Arena*);
template<> ::cvte::hdmap::Point2d* Arena::CreateMaybeMessage<::cvte::hdmap::Point2d>(Arena*);
template<> ::cvte::hdmap::Polygon* Arena::CreateMaybeMessage<::cvte::hdmap::Polygon>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cvte {
namespace hdmap {

// ===================================================================

class Point2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.Point2d) */ {
 public:
  Point2d();
  virtual ~Point2d();

  Point2d(const Point2d& from);

  inline Point2d& operator=(const Point2d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point2d(Point2d&& from) noexcept
    : Point2d() {
    *this = ::std::move(from);
  }

  inline Point2d& operator=(Point2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2d* internal_default_instance() {
    return reinterpret_cast<const Point2d*>(
               &_Point2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point2d* other);
  friend void swap(Point2d& a, Point2d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point2d* New() const final {
    return CreateMaybeMessage<Point2d>(NULL);
  }

  Point2d* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point2d>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point2d& from);
  void MergeFrom(const Point2d& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.Point2d)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::protobuf_map_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Polygon* other);
  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(NULL);
  }

  Polygon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cvte.hdmap.Point2d point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  ::cvte::hdmap::Point2d* mutable_point(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d >*
      mutable_point();
  const ::cvte::hdmap::Point2d& point(int index) const;
  ::cvte::hdmap::Point2d* add_point();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d >&
      point() const;

  // @@protoc_insertion_point(class_scope:cvte.hdmap.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d > point_;
  friend struct ::protobuf_map_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LineSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.LineSegment) */ {
 public:
  LineSegment();
  virtual ~LineSegment();

  LineSegment(const LineSegment& from);

  inline LineSegment& operator=(const LineSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineSegment(LineSegment&& from) noexcept
    : LineSegment() {
    *this = ::std::move(from);
  }

  inline LineSegment& operator=(LineSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineSegment* internal_default_instance() {
    return reinterpret_cast<const LineSegment*>(
               &_LineSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LineSegment* other);
  friend void swap(LineSegment& a, LineSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineSegment* New() const final {
    return CreateMaybeMessage<LineSegment>(NULL);
  }

  LineSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LineSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LineSegment& from);
  void MergeFrom(const LineSegment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cvte.hdmap.Point2d point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  ::cvte::hdmap::Point2d* mutable_point(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d >*
      mutable_point();
  const ::cvte::hdmap::Point2d& point(int index) const;
  ::cvte::hdmap::Point2d* add_point();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d >&
      point() const;

  // @@protoc_insertion_point(class_scope:cvte.hdmap.LineSegment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d > point_;
  friend struct ::protobuf_map_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CurveSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.CurveSegment) */ {
 public:
  CurveSegment();
  virtual ~CurveSegment();

  CurveSegment(const CurveSegment& from);

  inline CurveSegment& operator=(const CurveSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurveSegment(CurveSegment&& from) noexcept
    : CurveSegment() {
    *this = ::std::move(from);
  }

  inline CurveSegment& operator=(CurveSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurveSegment& default_instance();

  enum CurveTypeCase {
    kLineSegment = 1,
    CURVE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurveSegment* internal_default_instance() {
    return reinterpret_cast<const CurveSegment*>(
               &_CurveSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CurveSegment* other);
  friend void swap(CurveSegment& a, CurveSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurveSegment* New() const final {
    return CreateMaybeMessage<CurveSegment>(NULL);
  }

  CurveSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CurveSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CurveSegment& from);
  void MergeFrom(const CurveSegment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurveSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cvte.hdmap.Point2d start_position = 7;
  bool has_start_position() const;
  void clear_start_position();
  static const int kStartPositionFieldNumber = 7;
  private:
  const ::cvte::hdmap::Point2d& _internal_start_position() const;
  public:
  const ::cvte::hdmap::Point2d& start_position() const;
  ::cvte::hdmap::Point2d* release_start_position();
  ::cvte::hdmap::Point2d* mutable_start_position();
  void set_allocated_start_position(::cvte::hdmap::Point2d* start_position);

  // optional double s = 6;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 6;
  double s() const;
  void set_s(double value);

  // optional double heading = 8;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 8;
  double heading() const;
  void set_heading(double value);

  // optional double length = 9;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 9;
  double length() const;
  void set_length(double value);

  // optional .cvte.hdmap.LineSegment line_segment = 1;
  bool has_line_segment() const;
  void clear_line_segment();
  static const int kLineSegmentFieldNumber = 1;
  private:
  const ::cvte::hdmap::LineSegment& _internal_line_segment() const;
  public:
  const ::cvte::hdmap::LineSegment& line_segment() const;
  ::cvte::hdmap::LineSegment* release_line_segment();
  ::cvte::hdmap::LineSegment* mutable_line_segment();
  void set_allocated_line_segment(::cvte::hdmap::LineSegment* line_segment);

  void clear_curve_type();
  CurveTypeCase curve_type_case() const;
  // @@protoc_insertion_point(class_scope:cvte.hdmap.CurveSegment)
 private:
  void set_has_line_segment();
  void set_has_s();
  void clear_has_s();
  void set_has_start_position();
  void clear_has_start_position();
  void set_has_heading();
  void clear_has_heading();
  void set_has_length();
  void clear_has_length();

  inline bool has_curve_type() const;
  inline void clear_has_curve_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::cvte::hdmap::Point2d* start_position_;
  double s_;
  double heading_;
  double length_;
  union CurveTypeUnion {
    CurveTypeUnion() {}
    ::cvte::hdmap::LineSegment* line_segment_;
  } curve_type_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_map_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Curve : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.Curve) */ {
 public:
  Curve();
  virtual ~Curve();

  Curve(const Curve& from);

  inline Curve& operator=(const Curve& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Curve(Curve&& from) noexcept
    : Curve() {
    *this = ::std::move(from);
  }

  inline Curve& operator=(Curve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Curve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Curve* internal_default_instance() {
    return reinterpret_cast<const Curve*>(
               &_Curve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Curve* other);
  friend void swap(Curve& a, Curve& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Curve* New() const final {
    return CreateMaybeMessage<Curve>(NULL);
  }

  Curve* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Curve>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Curve& from);
  void MergeFrom(const Curve& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Curve* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cvte.hdmap.CurveSegment segment = 1;
  int segment_size() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 1;
  ::cvte::hdmap::CurveSegment* mutable_segment(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::CurveSegment >*
      mutable_segment();
  const ::cvte::hdmap::CurveSegment& segment(int index) const;
  ::cvte::hdmap::CurveSegment* add_segment();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::CurveSegment >&
      segment() const;

  // @@protoc_insertion_point(class_scope:cvte.hdmap.Curve)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::CurveSegment > segment_;
  friend struct ::protobuf_map_5fgeometry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point2d

// required double x = 1;
inline bool Point2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point2d::x() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Point2d.x)
  return x_;
}
inline void Point2d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.Point2d.x)
}

// required double y = 2;
inline bool Point2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point2d::y() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Point2d.y)
  return y_;
}
inline void Point2d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.Point2d.y)
}

// -------------------------------------------------------------------

// Polygon

// repeated .cvte.hdmap.Point2d point = 1;
inline int Polygon::point_size() const {
  return point_.size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline ::cvte::hdmap::Point2d* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Polygon.point)
  return point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.Polygon.point)
  return &point_;
}
inline const ::cvte::hdmap::Point2d& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Polygon.point)
  return point_.Get(index);
}
inline ::cvte::hdmap::Point2d* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.Polygon.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.Polygon.point)
  return point_;
}

// -------------------------------------------------------------------

// LineSegment

// repeated .cvte.hdmap.Point2d point = 1;
inline int LineSegment::point_size() const {
  return point_.size();
}
inline void LineSegment::clear_point() {
  point_.Clear();
}
inline ::cvte::hdmap::Point2d* LineSegment::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.LineSegment.point)
  return point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d >*
LineSegment::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.LineSegment.point)
  return &point_;
}
inline const ::cvte::hdmap::Point2d& LineSegment::point(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.LineSegment.point)
  return point_.Get(index);
}
inline ::cvte::hdmap::Point2d* LineSegment::add_point() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.LineSegment.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Point2d >&
LineSegment::point() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.LineSegment.point)
  return point_;
}

// -------------------------------------------------------------------

// CurveSegment

// optional .cvte.hdmap.LineSegment line_segment = 1;
inline bool CurveSegment::has_line_segment() const {
  return curve_type_case() == kLineSegment;
}
inline void CurveSegment::set_has_line_segment() {
  _oneof_case_[0] = kLineSegment;
}
inline void CurveSegment::clear_line_segment() {
  if (has_line_segment()) {
    delete curve_type_.line_segment_;
    clear_has_curve_type();
  }
}
inline const ::cvte::hdmap::LineSegment& CurveSegment::_internal_line_segment() const {
  return *curve_type_.line_segment_;
}
inline ::cvte::hdmap::LineSegment* CurveSegment::release_line_segment() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.CurveSegment.line_segment)
  if (has_line_segment()) {
    clear_has_curve_type();
      ::cvte::hdmap::LineSegment* temp = curve_type_.line_segment_;
    curve_type_.line_segment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::cvte::hdmap::LineSegment& CurveSegment::line_segment() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.CurveSegment.line_segment)
  return has_line_segment()
      ? *curve_type_.line_segment_
      : *reinterpret_cast< ::cvte::hdmap::LineSegment*>(&::cvte::hdmap::_LineSegment_default_instance_);
}
inline ::cvte::hdmap::LineSegment* CurveSegment::mutable_line_segment() {
  if (!has_line_segment()) {
    clear_curve_type();
    set_has_line_segment();
    curve_type_.line_segment_ = CreateMaybeMessage< ::cvte::hdmap::LineSegment >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.CurveSegment.line_segment)
  return curve_type_.line_segment_;
}

// optional double s = 6;
inline bool CurveSegment::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurveSegment::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurveSegment::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurveSegment::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double CurveSegment::s() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.CurveSegment.s)
  return s_;
}
inline void CurveSegment::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.CurveSegment.s)
}

// optional .cvte.hdmap.Point2d start_position = 7;
inline bool CurveSegment::has_start_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurveSegment::set_has_start_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurveSegment::clear_has_start_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurveSegment::clear_start_position() {
  if (start_position_ != NULL) start_position_->Clear();
  clear_has_start_position();
}
inline const ::cvte::hdmap::Point2d& CurveSegment::_internal_start_position() const {
  return *start_position_;
}
inline const ::cvte::hdmap::Point2d& CurveSegment::start_position() const {
  const ::cvte::hdmap::Point2d* p = start_position_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.CurveSegment.start_position)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Point2d*>(
      &::cvte::hdmap::_Point2d_default_instance_);
}
inline ::cvte::hdmap::Point2d* CurveSegment::release_start_position() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.CurveSegment.start_position)
  clear_has_start_position();
  ::cvte::hdmap::Point2d* temp = start_position_;
  start_position_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Point2d* CurveSegment::mutable_start_position() {
  set_has_start_position();
  if (start_position_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Point2d>(GetArenaNoVirtual());
    start_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.CurveSegment.start_position)
  return start_position_;
}
inline void CurveSegment::set_allocated_start_position(::cvte::hdmap::Point2d* start_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_position_;
  }
  if (start_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_position, submessage_arena);
    }
    set_has_start_position();
  } else {
    clear_has_start_position();
  }
  start_position_ = start_position;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.CurveSegment.start_position)
}

// optional double heading = 8;
inline bool CurveSegment::has_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurveSegment::set_has_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurveSegment::clear_has_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurveSegment::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double CurveSegment::heading() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.CurveSegment.heading)
  return heading_;
}
inline void CurveSegment::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.CurveSegment.heading)
}

// optional double length = 9;
inline bool CurveSegment::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CurveSegment::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CurveSegment::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CurveSegment::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double CurveSegment::length() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.CurveSegment.length)
  return length_;
}
inline void CurveSegment::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.CurveSegment.length)
}

inline bool CurveSegment::has_curve_type() const {
  return curve_type_case() != CURVE_TYPE_NOT_SET;
}
inline void CurveSegment::clear_has_curve_type() {
  _oneof_case_[0] = CURVE_TYPE_NOT_SET;
}
inline CurveSegment::CurveTypeCase CurveSegment::curve_type_case() const {
  return CurveSegment::CurveTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Curve

// repeated .cvte.hdmap.CurveSegment segment = 1;
inline int Curve::segment_size() const {
  return segment_.size();
}
inline void Curve::clear_segment() {
  segment_.Clear();
}
inline ::cvte::hdmap::CurveSegment* Curve::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Curve.segment)
  return segment_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::CurveSegment >*
Curve::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.Curve.segment)
  return &segment_;
}
inline const ::cvte::hdmap::CurveSegment& Curve::segment(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.Curve.segment)
  return segment_.Get(index);
}
inline ::cvte::hdmap::CurveSegment* Curve::add_segment() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.Curve.segment)
  return segment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::CurveSegment >&
Curve::segment() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.Curve.segment)
  return segment_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace cvte

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_map_5fgeometry_2eproto
