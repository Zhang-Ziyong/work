// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_speed_bump.proto

#include "map_speed_bump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Curve;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
}  // namespace protobuf_map_5fgeometry_2eproto
namespace protobuf_map_5fid_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Id;
}  // namespace protobuf_map_5fid_2eproto
namespace cvte {
namespace hdmap {
class SpeedBumpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedBump>
      _instance;
} _SpeedBump_default_instance_;
}  // namespace hdmap
}  // namespace cvte
namespace protobuf_map_5fspeed_5fbump_2eproto {
static void InitDefaultsSpeedBump() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_SpeedBump_default_instance_;
    new (ptr) ::cvte::hdmap::SpeedBump();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::SpeedBump::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SpeedBump =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSpeedBump}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,
      &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
      &protobuf_map_5fgeometry_2eproto::scc_info_Curve.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedBump.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, static_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedBump, position_),
  3,
  4,
  5,
  0,
  1,
  2,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::cvte::hdmap::SpeedBump)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_SpeedBump_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "map_speed_bump.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024map_speed_bump.proto\022\ncvte.hdmap\032\014map_"
      "id.proto\032\022map_geometry.proto\"\333\001\n\tSpeedBu"
      "mp\022\032\n\002id\030\001 \001(\0132\016.cvte.hdmap.Id\022$\n\007polygo"
      "n\030\002 \001(\0132\023.cvte.hdmap.Polygon\022\r\n\005speed\030\003 "
      "\001(\001\022\020\n\010material\030\004 \001(\t\022\r\n\005color\030\005 \001(\t\022\023\n\013"
      "static_area\030\006 \001(\t\022\"\n\noverlap_id\030\007 \003(\0132\016."
      "cvte.hdmap.Id\022#\n\010position\030\010 \003(\0132\021.cvte.h"
      "dmap.Curve"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 290);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_speed_bump.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fid_2eproto::AddDescriptors();
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5fspeed_5fbump_2eproto
namespace cvte {
namespace hdmap {

// ===================================================================

void SpeedBump::InitAsDefaultInstance() {
  ::cvte::hdmap::_SpeedBump_default_instance_._instance.get_mutable()->id_ = const_cast< ::cvte::hdmap::Id*>(
      ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_SpeedBump_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::cvte::hdmap::Polygon*>(
      ::cvte::hdmap::Polygon::internal_default_instance());
}
void SpeedBump::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void SpeedBump::clear_polygon() {
  if (polygon_ != NULL) polygon_->Clear();
  clear_has_polygon();
}
void SpeedBump::clear_overlap_id() {
  overlap_id_.Clear();
}
void SpeedBump::clear_position() {
  position_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedBump::kIdFieldNumber;
const int SpeedBump::kPolygonFieldNumber;
const int SpeedBump::kSpeedFieldNumber;
const int SpeedBump::kMaterialFieldNumber;
const int SpeedBump::kColorFieldNumber;
const int SpeedBump::kStaticAreaFieldNumber;
const int SpeedBump::kOverlapIdFieldNumber;
const int SpeedBump::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedBump::SpeedBump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fspeed_5fbump_2eproto::scc_info_SpeedBump.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.SpeedBump)
}
SpeedBump::SpeedBump(const SpeedBump& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      overlap_id_(from.overlap_id_),
      position_(from.position_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  material_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_material()) {
    material_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.material_);
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  static_area_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_static_area()) {
    static_area_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.static_area_);
  }
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.SpeedBump)
}

void SpeedBump::SharedCtor() {
  material_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_));
}

SpeedBump::~SpeedBump() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.SpeedBump)
  SharedDtor();
}

void SpeedBump::SharedDtor() {
  material_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete polygon_;
}

void SpeedBump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedBump::descriptor() {
  ::protobuf_map_5fspeed_5fbump_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fspeed_5fbump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedBump& SpeedBump::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fspeed_5fbump_2eproto::scc_info_SpeedBump.base);
  return *internal_default_instance();
}


void SpeedBump::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.SpeedBump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlap_id_.Clear();
  position_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      material_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      color_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      static_area_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedBump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.SpeedBump)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string material = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->material().data(), static_cast<int>(this->material().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cvte.hdmap.SpeedBump.material");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cvte.hdmap.SpeedBump.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string static_area = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_static_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->static_area().data(), static_cast<int>(this->static_area().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cvte.hdmap.SpeedBump.static_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.Id overlap_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.Curve position = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.SpeedBump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.SpeedBump)
  return false;
#undef DO_
}

void SpeedBump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.SpeedBump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_polygon(), output);
  }

  // optional double speed = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->speed(), output);
  }

  // optional string material = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material().data(), static_cast<int>(this->material().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cvte.hdmap.SpeedBump.material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->material(), output);
  }

  // optional string color = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cvte.hdmap.SpeedBump.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->color(), output);
  }

  // optional string static_area = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->static_area().data(), static_cast<int>(this->static_area().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cvte.hdmap.SpeedBump.static_area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->static_area(), output);
  }

  // repeated .cvte.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->overlap_id(static_cast<int>(i)),
      output);
  }

  // repeated .cvte.hdmap.Curve position = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->position(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.SpeedBump)
}

::google::protobuf::uint8* SpeedBump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.SpeedBump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_polygon(), deterministic, target);
  }

  // optional double speed = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->speed(), target);
  }

  // optional string material = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material().data(), static_cast<int>(this->material().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cvte.hdmap.SpeedBump.material");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->material(), target);
  }

  // optional string color = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cvte.hdmap.SpeedBump.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->color(), target);
  }

  // optional string static_area = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->static_area().data(), static_cast<int>(this->static_area().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cvte.hdmap.SpeedBump.static_area");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->static_area(), target);
  }

  // repeated .cvte.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->overlap_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cvte.hdmap.Curve position = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->position(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.SpeedBump)
  return target;
}

size_t SpeedBump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.SpeedBump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cvte.hdmap.Id overlap_id = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->overlap_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overlap_id(static_cast<int>(i)));
    }
  }

  // repeated .cvte.hdmap.Curve position = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string material = 4;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->material());
    }

    // optional string color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional string static_area = 6;
    if (has_static_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->static_area());
    }

    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *polygon_);
    }

    // optional double speed = 3;
    if (has_speed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedBump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.SpeedBump)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBump* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedBump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.SpeedBump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.SpeedBump)
    MergeFrom(*source);
  }
}

void SpeedBump::MergeFrom(const SpeedBump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.SpeedBump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  position_.MergeFrom(from.position_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_material();
      material_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.material_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_static_area();
      static_area_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.static_area_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000020u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedBump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.SpeedBump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBump::CopyFrom(const SpeedBump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.SpeedBump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBump::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->position())) return false;
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized()) return false;
  }
  return true;
}

void SpeedBump::Swap(SpeedBump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedBump::InternalSwap(SpeedBump* other) {
  using std::swap;
  CastToBase(&overlap_id_)->InternalSwap(CastToBase(&other->overlap_id_));
  CastToBase(&position_)->InternalSwap(CastToBase(&other->position_));
  material_.Swap(&other->material_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  static_area_.Swap(&other->static_area_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(speed_, other->speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedBump::GetMetadata() const {
  protobuf_map_5fspeed_5fbump_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fspeed_5fbump_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace cvte
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::SpeedBump* Arena::CreateMaybeMessage< ::cvte::hdmap::SpeedBump >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::SpeedBump >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
