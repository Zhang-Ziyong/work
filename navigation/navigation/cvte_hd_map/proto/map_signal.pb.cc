// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_signal.proto

#include "map_signal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2d;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Curve;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
}  // namespace protobuf_map_5fgeometry_2eproto
namespace protobuf_map_5fid_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Id;
}  // namespace protobuf_map_5fid_2eproto
namespace protobuf_map_5fsignal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fsignal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fsignal_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Subsignal;
}  // namespace protobuf_map_5fsignal_2eproto
namespace cvte {
namespace hdmap {
class SubsignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subsignal>
      _instance;
} _Subsignal_default_instance_;
class SignInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignInfo>
      _instance;
} _SignInfo_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal>
      _instance;
} _Signal_default_instance_;
}  // namespace hdmap
}  // namespace cvte
namespace protobuf_map_5fsignal_2eproto {
static void InitDefaultsSubsignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_Subsignal_default_instance_;
    new (ptr) ::cvte::hdmap::Subsignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::Subsignal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Subsignal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSubsignal}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,
      &protobuf_map_5fgeometry_2eproto::scc_info_Point2d.base,}};

static void InitDefaultsSignInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_SignInfo_default_instance_;
    new (ptr) ::cvte::hdmap::SignInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::SignInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignInfo}, {}};

static void InitDefaultsSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_Signal_default_instance_;
    new (ptr) ::cvte::hdmap::Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::Signal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Signal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSignal}, {
      &protobuf_map_5fid_2eproto::scc_info_Id.base,
      &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
      &protobuf_map_5fsignal_2eproto::scc_info_Subsignal.base,
      &protobuf_map_5fgeometry_2eproto::scc_info_Curve.base,
      &protobuf_map_5fsignal_2eproto::scc_info_SignInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Subsignal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Subsignal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Subsignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Subsignal, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Subsignal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Subsignal, location_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SignInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SignInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SignInfo, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, subsignal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, stop_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Signal, sign_info_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::cvte::hdmap::Subsignal)},
  { 11, 17, sizeof(::cvte::hdmap::SignInfo)},
  { 18, 30, sizeof(::cvte::hdmap::Signal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_Subsignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_SignInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_Signal_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "map_signal.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020map_signal.proto\022\ncvte.hdmap\032\022map_geom"
      "etry.proto\032\014map_id.proto\"\231\002\n\tSubsignal\022\032"
      "\n\002id\030\001 \001(\0132\016.cvte.hdmap.Id\022(\n\004type\030\002 \001(\016"
      "2\032.cvte.hdmap.Subsignal.Type\022%\n\010location"
      "\030\003 \001(\0132\023.cvte.hdmap.Point2d\"\236\001\n\004Type\022\013\n\007"
      "UNKNOWN\020\001\022\n\n\006CIRCLE\020\002\022\016\n\nARROW_LEFT\020\003\022\021\n"
      "\rARROW_FORWARD\020\004\022\017\n\013ARROW_RIGHT\020\005\022\032\n\026ARR"
      "OW_LEFT_AND_FORWARD\020\006\022\033\n\027ARROW_RIGHT_AND"
      "_FORWARD\020\007\022\020\n\014ARROW_U_TURN\020\010\"_\n\010SignInfo"
      "\022\'\n\004type\030\001 \001(\0162\031.cvte.hdmap.SignInfo.Typ"
      "e\"*\n\004Type\022\010\n\004None\020\000\022\030\n\024NO_RIGHT_TURN_ON_"
      "RED\020\001\"\204\003\n\006Signal\022\032\n\002id\030\001 \001(\0132\016.cvte.hdma"
      "p.Id\022%\n\010boundary\030\002 \001(\0132\023.cvte.hdmap.Poly"
      "gon\022(\n\tsubsignal\030\003 \003(\0132\025.cvte.hdmap.Subs"
      "ignal\022\"\n\noverlap_id\030\004 \003(\0132\016.cvte.hdmap.I"
      "d\022%\n\004type\030\005 \001(\0162\027.cvte.hdmap.Signal.Type"
      "\022$\n\tstop_line\030\006 \003(\0132\021.cvte.hdmap.Curve\022\'"
      "\n\tsign_info\030\007 \003(\0132\024.cvte.hdmap.SignInfo\""
      "s\n\004Type\022\013\n\007UNKNOWN\020\001\022\024\n\020MIX_2_HORIZONTAL"
      "\020\002\022\022\n\016MIX_2_VERTICAL\020\003\022\024\n\020MIX_3_HORIZONT"
      "AL\020\004\022\022\n\016MIX_3_VERTICAL\020\005\022\n\n\006SINGLE\020\006"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 836);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_signal.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_map_5fid_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5fsignal_2eproto
namespace cvte {
namespace hdmap {
const ::google::protobuf::EnumDescriptor* Subsignal_Type_descriptor() {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5fsignal_2eproto::file_level_enum_descriptors[0];
}
bool Subsignal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Subsignal_Type Subsignal::UNKNOWN;
const Subsignal_Type Subsignal::CIRCLE;
const Subsignal_Type Subsignal::ARROW_LEFT;
const Subsignal_Type Subsignal::ARROW_FORWARD;
const Subsignal_Type Subsignal::ARROW_RIGHT;
const Subsignal_Type Subsignal::ARROW_LEFT_AND_FORWARD;
const Subsignal_Type Subsignal::ARROW_RIGHT_AND_FORWARD;
const Subsignal_Type Subsignal::ARROW_U_TURN;
const Subsignal_Type Subsignal::Type_MIN;
const Subsignal_Type Subsignal::Type_MAX;
const int Subsignal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SignInfo_Type_descriptor() {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5fsignal_2eproto::file_level_enum_descriptors[1];
}
bool SignInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SignInfo_Type SignInfo::None;
const SignInfo_Type SignInfo::NO_RIGHT_TURN_ON_RED;
const SignInfo_Type SignInfo::Type_MIN;
const SignInfo_Type SignInfo::Type_MAX;
const int SignInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5fsignal_2eproto::file_level_enum_descriptors[2];
}
bool Signal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Type Signal::UNKNOWN;
const Signal_Type Signal::MIX_2_HORIZONTAL;
const Signal_Type Signal::MIX_2_VERTICAL;
const Signal_Type Signal::MIX_3_HORIZONTAL;
const Signal_Type Signal::MIX_3_VERTICAL;
const Signal_Type Signal::SINGLE;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Subsignal::InitAsDefaultInstance() {
  ::cvte::hdmap::_Subsignal_default_instance_._instance.get_mutable()->id_ = const_cast< ::cvte::hdmap::Id*>(
      ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_Subsignal_default_instance_._instance.get_mutable()->location_ = const_cast< ::cvte::hdmap::Point2d*>(
      ::cvte::hdmap::Point2d::internal_default_instance());
}
void Subsignal::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Subsignal::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subsignal::kIdFieldNumber;
const int Subsignal::kTypeFieldNumber;
const int Subsignal::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subsignal::Subsignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fsignal_2eproto::scc_info_Subsignal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.Subsignal)
}
Subsignal::Subsignal(const Subsignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::cvte::hdmap::Point2d(*from.location_);
  } else {
    location_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.Subsignal)
}

void Subsignal::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&id_)) + sizeof(location_));
  type_ = 1;
}

Subsignal::~Subsignal() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.Subsignal)
  SharedDtor();
}

void Subsignal::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete location_;
}

void Subsignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Subsignal::descriptor() {
  ::protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Subsignal& Subsignal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fsignal_2eproto::scc_info_Subsignal.base);
  return *internal_default_instance();
}


void Subsignal::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.Subsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Subsignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.Subsignal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Subsignal.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cvte::hdmap::Subsignal_Type_IsValid(value)) {
            set_type(static_cast< ::cvte::hdmap::Subsignal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Point2d location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.Subsignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.Subsignal)
  return false;
#undef DO_
}

void Subsignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.Subsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Subsignal.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .cvte.hdmap.Point2d location = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.Subsignal)
}

::google::protobuf::uint8* Subsignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.Subsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional .cvte.hdmap.Subsignal.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .cvte.hdmap.Point2d location = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.Subsignal)
  return target;
}

size_t Subsignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.Subsignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .cvte.hdmap.Point2d location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .cvte.hdmap.Subsignal.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subsignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  const Subsignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subsignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.Subsignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.Subsignal)
    MergeFrom(*source);
  }
}

void Subsignal::MergeFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_location()->::cvte::hdmap::Point2d::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Subsignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subsignal::CopyFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subsignal::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void Subsignal::Swap(Subsignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subsignal::InternalSwap(Subsignal* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(location_, other->location_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Subsignal::GetMetadata() const {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignInfo::SignInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fsignal_2eproto::scc_info_SignInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.SignInfo)
}
SignInfo::SignInfo(const SignInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.SignInfo)
}

void SignInfo::SharedCtor() {
  type_ = 0;
}

SignInfo::~SignInfo() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.SignInfo)
  SharedDtor();
}

void SignInfo::SharedDtor() {
}

void SignInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignInfo::descriptor() {
  ::protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignInfo& SignInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fsignal_2eproto::scc_info_SignInfo.base);
  return *internal_default_instance();
}


void SignInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.SignInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.SignInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.SignInfo.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cvte::hdmap::SignInfo_Type_IsValid(value)) {
            set_type(static_cast< ::cvte::hdmap::SignInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.SignInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.SignInfo)
  return false;
#undef DO_
}

void SignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.SignInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.SignInfo.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.SignInfo)
}

::google::protobuf::uint8* SignInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.SignInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.SignInfo.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.SignInfo)
  return target;
}

size_t SignInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.SignInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .cvte.hdmap.SignInfo.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.SignInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.SignInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.SignInfo)
    MergeFrom(*source);
  }
}

void SignInfo::MergeFrom(const SignInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.SignInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void SignInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.SignInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInfo::CopyFrom(const SignInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.SignInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInfo::IsInitialized() const {
  return true;
}

void SignInfo::Swap(SignInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignInfo::InternalSwap(SignInfo* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignInfo::GetMetadata() const {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
  ::cvte::hdmap::_Signal_default_instance_._instance.get_mutable()->id_ = const_cast< ::cvte::hdmap::Id*>(
      ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_Signal_default_instance_._instance.get_mutable()->boundary_ = const_cast< ::cvte::hdmap::Polygon*>(
      ::cvte::hdmap::Polygon::internal_default_instance());
}
void Signal::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Signal::clear_boundary() {
  if (boundary_ != NULL) boundary_->Clear();
  clear_has_boundary();
}
void Signal::clear_overlap_id() {
  overlap_id_.Clear();
}
void Signal::clear_stop_line() {
  stop_line_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kIdFieldNumber;
const int Signal::kBoundaryFieldNumber;
const int Signal::kSubsignalFieldNumber;
const int Signal::kOverlapIdFieldNumber;
const int Signal::kTypeFieldNumber;
const int Signal::kStopLineFieldNumber;
const int Signal::kSignInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fsignal_2eproto::scc_info_Signal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      subsignal_(from.subsignal_),
      overlap_id_(from.overlap_id_),
      stop_line_(from.stop_line_),
      sign_info_(from.sign_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::cvte::hdmap::Polygon(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.Signal)
}

void Signal::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boundary_) -
      reinterpret_cast<char*>(&id_)) + sizeof(boundary_));
  type_ = 1;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete boundary_;
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  ::protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fsignal_2eproto::scc_info_Signal.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subsignal_.Clear();
  overlap_id_.Clear();
  stop_line_.Clear();
  sign_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.Signal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.Subsignal subsignal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_subsignal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.Id overlap_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Signal.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cvte::hdmap::Signal_Type_IsValid(value)) {
            set_type(static_cast< ::cvte::hdmap::Signal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.Curve stop_line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stop_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.SignInfo sign_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sign_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_boundary(), output);
  }

  // repeated .cvte.hdmap.Subsignal subsignal = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsignal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->subsignal(static_cast<int>(i)),
      output);
  }

  // repeated .cvte.hdmap.Id overlap_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->overlap_id(static_cast<int>(i)),
      output);
  }

  // optional .cvte.hdmap.Signal.Type type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .cvte.hdmap.Curve stop_line = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->stop_line(static_cast<int>(i)),
      output);
  }

  // repeated .cvte.hdmap.SignInfo sign_info = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sign_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->sign_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional .cvte.hdmap.Polygon boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_boundary(), deterministic, target);
  }

  // repeated .cvte.hdmap.Subsignal subsignal = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsignal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->subsignal(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cvte.hdmap.Id overlap_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->overlap_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .cvte.hdmap.Signal.Type type = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .cvte.hdmap.Curve stop_line = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stop_line(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cvte.hdmap.SignInfo sign_info = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sign_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->sign_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.Signal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cvte.hdmap.Subsignal subsignal = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->subsignal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subsignal(static_cast<int>(i)));
    }
  }

  // repeated .cvte.hdmap.Id overlap_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->overlap_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overlap_id(static_cast<int>(i)));
    }
  }

  // repeated .cvte.hdmap.Curve stop_line = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stop_line(static_cast<int>(i)));
    }
  }

  // repeated .cvte.hdmap.SignInfo sign_info = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->sign_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sign_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .cvte.hdmap.Polygon boundary = 2;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *boundary_);
    }

    // optional .cvte.hdmap.Signal.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subsignal_.MergeFrom(from.subsignal_);
  overlap_id_.MergeFrom(from.overlap_id_);
  stop_line_.MergeFrom(from.stop_line_);
  sign_info_.MergeFrom(from.sign_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::cvte::hdmap::Polygon::MergeFrom(from.boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->subsignal())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_line())) return false;
  if (has_boundary()) {
    if (!this->boundary_->IsInitialized()) return false;
  }
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  CastToBase(&subsignal_)->InternalSwap(CastToBase(&other->subsignal_));
  CastToBase(&overlap_id_)->InternalSwap(CastToBase(&other->overlap_id_));
  CastToBase(&stop_line_)->InternalSwap(CastToBase(&other->stop_line_));
  CastToBase(&sign_info_)->InternalSwap(CastToBase(&other->sign_info_));
  swap(id_, other->id_);
  swap(boundary_, other->boundary_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace cvte
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::Subsignal* Arena::CreateMaybeMessage< ::cvte::hdmap::Subsignal >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::Subsignal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::SignInfo* Arena::CreateMaybeMessage< ::cvte::hdmap::SignInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::SignInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::Signal* Arena::CreateMaybeMessage< ::cvte::hdmap::Signal >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::Signal >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
