// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_c5_area.proto

#ifndef PROTOBUF_INCLUDED_map_5fc5_5farea_2eproto
#define PROTOBUF_INCLUDED_map_5fc5_5farea_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_id.pb.h"
#include "map_geometry.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fc5_5farea_2eproto 

namespace protobuf_map_5fc5_5farea_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_map_5fc5_5farea_2eproto
namespace cvte {
namespace hdmap {
class BlackArea;
class BlackAreaDefaultTypeInternal;
extern BlackAreaDefaultTypeInternal _BlackArea_default_instance_;
class CleanArea;
class CleanAreaDefaultTypeInternal;
extern CleanAreaDefaultTypeInternal _CleanArea_default_instance_;
class Elevator;
class ElevatorDefaultTypeInternal;
extern ElevatorDefaultTypeInternal _Elevator_default_instance_;
class MapArea;
class MapAreaDefaultTypeInternal;
extern MapAreaDefaultTypeInternal _MapArea_default_instance_;
class MarkArea;
class MarkAreaDefaultTypeInternal;
extern MarkAreaDefaultTypeInternal _MarkArea_default_instance_;
class NarrowArea;
class NarrowAreaDefaultTypeInternal;
extern NarrowAreaDefaultTypeInternal _NarrowArea_default_instance_;
class PitArea;
class PitAreaDefaultTypeInternal;
extern PitAreaDefaultTypeInternal _PitArea_default_instance_;
class ProhibitedArea;
class ProhibitedAreaDefaultTypeInternal;
extern ProhibitedAreaDefaultTypeInternal _ProhibitedArea_default_instance_;
class SlopeArea;
class SlopeAreaDefaultTypeInternal;
extern SlopeAreaDefaultTypeInternal _SlopeArea_default_instance_;
}  // namespace hdmap
}  // namespace cvte
namespace google {
namespace protobuf {
template<> ::cvte::hdmap::BlackArea* Arena::CreateMaybeMessage<::cvte::hdmap::BlackArea>(Arena*);
template<> ::cvte::hdmap::CleanArea* Arena::CreateMaybeMessage<::cvte::hdmap::CleanArea>(Arena*);
template<> ::cvte::hdmap::Elevator* Arena::CreateMaybeMessage<::cvte::hdmap::Elevator>(Arena*);
template<> ::cvte::hdmap::MapArea* Arena::CreateMaybeMessage<::cvte::hdmap::MapArea>(Arena*);
template<> ::cvte::hdmap::MarkArea* Arena::CreateMaybeMessage<::cvte::hdmap::MarkArea>(Arena*);
template<> ::cvte::hdmap::NarrowArea* Arena::CreateMaybeMessage<::cvte::hdmap::NarrowArea>(Arena*);
template<> ::cvte::hdmap::PitArea* Arena::CreateMaybeMessage<::cvte::hdmap::PitArea>(Arena*);
template<> ::cvte::hdmap::ProhibitedArea* Arena::CreateMaybeMessage<::cvte::hdmap::ProhibitedArea>(Arena*);
template<> ::cvte::hdmap::SlopeArea* Arena::CreateMaybeMessage<::cvte::hdmap::SlopeArea>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cvte {
namespace hdmap {

// ===================================================================

class MapArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.MapArea) */ {
 public:
  MapArea();
  virtual ~MapArea();

  MapArea(const MapArea& from);

  inline MapArea& operator=(const MapArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapArea(MapArea&& from) noexcept
    : MapArea() {
    *this = ::std::move(from);
  }

  inline MapArea& operator=(MapArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapArea* internal_default_instance() {
    return reinterpret_cast<const MapArea*>(
               &_MapArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MapArea* other);
  friend void swap(MapArea& a, MapArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapArea* New() const final {
    return CreateMaybeMessage<MapArea>(NULL);
  }

  MapArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapArea& from);
  void MergeFrom(const MapArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cvte.hdmap.Id cleanArea_Id = 3;
  int cleanarea_id_size() const;
  void clear_cleanarea_id();
  static const int kCleanAreaIdFieldNumber = 3;
  ::cvte::hdmap::Id* mutable_cleanarea_id(int index);
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
      mutable_cleanarea_id();
  const ::cvte::hdmap::Id& cleanarea_id(int index) const;
  ::cvte::hdmap::Id* add_cleanarea_id();
  const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
      cleanarea_id() const;

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.MapArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id > cleanarea_id_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CleanArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.CleanArea) */ {
 public:
  CleanArea();
  virtual ~CleanArea();

  CleanArea(const CleanArea& from);

  inline CleanArea& operator=(const CleanArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CleanArea(CleanArea&& from) noexcept
    : CleanArea() {
    *this = ::std::move(from);
  }

  inline CleanArea& operator=(CleanArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CleanArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanArea* internal_default_instance() {
    return reinterpret_cast<const CleanArea*>(
               &_CleanArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CleanArea* other);
  friend void swap(CleanArea& a, CleanArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CleanArea* New() const final {
    return CreateMaybeMessage<CleanArea>(NULL);
  }

  CleanArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CleanArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CleanArea& from);
  void MergeFrom(const CleanArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string material = 4;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 4;
  const ::std::string& material() const;
  void set_material(const ::std::string& value);
  #if LANG_CXX11
  void set_material(::std::string&& value);
  #endif
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  ::std::string* mutable_material();
  ::std::string* release_material();
  void set_allocated_material(::std::string* material);

  // optional string color = 5;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 5;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string static_area = 6;
  bool has_static_area() const;
  void clear_static_area();
  static const int kStaticAreaFieldNumber = 6;
  const ::std::string& static_area() const;
  void set_static_area(const ::std::string& value);
  #if LANG_CXX11
  void set_static_area(::std::string&& value);
  #endif
  void set_static_area(const char* value);
  void set_static_area(const char* value, size_t size);
  ::std::string* mutable_static_area();
  ::std::string* release_static_area();
  void set_allocated_static_area(::std::string* static_area);

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // optional double speed = 3;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  double speed() const;
  void set_speed(double value);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.CleanArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();
  void set_has_speed();
  void clear_has_speed();
  void set_has_material();
  void clear_has_material();
  void set_has_color();
  void clear_has_color();
  void set_has_static_area();
  void clear_has_static_area();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr material_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr static_area_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  double speed_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SlopeArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.SlopeArea) */ {
 public:
  SlopeArea();
  virtual ~SlopeArea();

  SlopeArea(const SlopeArea& from);

  inline SlopeArea& operator=(const SlopeArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlopeArea(SlopeArea&& from) noexcept
    : SlopeArea() {
    *this = ::std::move(from);
  }

  inline SlopeArea& operator=(SlopeArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlopeArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlopeArea* internal_default_instance() {
    return reinterpret_cast<const SlopeArea*>(
               &_SlopeArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SlopeArea* other);
  friend void swap(SlopeArea& a, SlopeArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlopeArea* New() const final {
    return CreateMaybeMessage<SlopeArea>(NULL);
  }

  SlopeArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SlopeArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SlopeArea& from);
  void MergeFrom(const SlopeArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlopeArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string material = 6;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 6;
  const ::std::string& material() const;
  void set_material(const ::std::string& value);
  #if LANG_CXX11
  void set_material(::std::string&& value);
  #endif
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  ::std::string* mutable_material();
  ::std::string* release_material();
  void set_allocated_material(::std::string* material);

  // optional string color = 7;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string static_area = 8;
  bool has_static_area() const;
  void clear_static_area();
  static const int kStaticAreaFieldNumber = 8;
  const ::std::string& static_area() const;
  void set_static_area(const ::std::string& value);
  #if LANG_CXX11
  void set_static_area(::std::string&& value);
  #endif
  void set_static_area(const char* value);
  void set_static_area(const char* value, size_t size);
  ::std::string* mutable_static_area();
  ::std::string* release_static_area();
  void set_allocated_static_area(::std::string* static_area);

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // optional double angle = 3;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  double angle() const;
  void set_angle(double value);

  // optional double length = 4;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  double length() const;
  void set_length(double value);

  // optional double speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  double speed() const;
  void set_speed(double value);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.SlopeArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();
  void set_has_angle();
  void clear_has_angle();
  void set_has_length();
  void clear_has_length();
  void set_has_speed();
  void clear_has_speed();
  void set_has_material();
  void clear_has_material();
  void set_has_color();
  void clear_has_color();
  void set_has_static_area();
  void clear_has_static_area();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr material_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr static_area_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  double angle_;
  double length_;
  double speed_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PitArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.PitArea) */ {
 public:
  PitArea();
  virtual ~PitArea();

  PitArea(const PitArea& from);

  inline PitArea& operator=(const PitArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PitArea(PitArea&& from) noexcept
    : PitArea() {
    *this = ::std::move(from);
  }

  inline PitArea& operator=(PitArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PitArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PitArea* internal_default_instance() {
    return reinterpret_cast<const PitArea*>(
               &_PitArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PitArea* other);
  friend void swap(PitArea& a, PitArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PitArea* New() const final {
    return CreateMaybeMessage<PitArea>(NULL);
  }

  PitArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PitArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PitArea& from);
  void MergeFrom(const PitArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PitArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string material = 6;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 6;
  const ::std::string& material() const;
  void set_material(const ::std::string& value);
  #if LANG_CXX11
  void set_material(::std::string&& value);
  #endif
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  ::std::string* mutable_material();
  ::std::string* release_material();
  void set_allocated_material(::std::string* material);

  // optional string color = 7;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string static_area = 8;
  bool has_static_area() const;
  void clear_static_area();
  static const int kStaticAreaFieldNumber = 8;
  const ::std::string& static_area() const;
  void set_static_area(const ::std::string& value);
  #if LANG_CXX11
  void set_static_area(::std::string&& value);
  #endif
  void set_static_area(const char* value);
  void set_static_area(const char* value, size_t size);
  ::std::string* mutable_static_area();
  ::std::string* release_static_area();
  void set_allocated_static_area(::std::string* static_area);

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // optional double angle = 3;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  double angle() const;
  void set_angle(double value);

  // optional double length = 4;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  double length() const;
  void set_length(double value);

  // optional double speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  double speed() const;
  void set_speed(double value);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.PitArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();
  void set_has_angle();
  void clear_has_angle();
  void set_has_length();
  void clear_has_length();
  void set_has_speed();
  void clear_has_speed();
  void set_has_material();
  void clear_has_material();
  void set_has_color();
  void clear_has_color();
  void set_has_static_area();
  void clear_has_static_area();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr material_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr static_area_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  double angle_;
  double length_;
  double speed_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Elevator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.Elevator) */ {
 public:
  Elevator();
  virtual ~Elevator();

  Elevator(const Elevator& from);

  inline Elevator& operator=(const Elevator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Elevator(Elevator&& from) noexcept
    : Elevator() {
    *this = ::std::move(from);
  }

  inline Elevator& operator=(Elevator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Elevator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Elevator* internal_default_instance() {
    return reinterpret_cast<const Elevator*>(
               &_Elevator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Elevator* other);
  friend void swap(Elevator& a, Elevator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Elevator* New() const final {
    return CreateMaybeMessage<Elevator>(NULL);
  }

  Elevator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Elevator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Elevator& from);
  void MergeFrom(const Elevator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Elevator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.Elevator)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NarrowArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.NarrowArea) */ {
 public:
  NarrowArea();
  virtual ~NarrowArea();

  NarrowArea(const NarrowArea& from);

  inline NarrowArea& operator=(const NarrowArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NarrowArea(NarrowArea&& from) noexcept
    : NarrowArea() {
    *this = ::std::move(from);
  }

  inline NarrowArea& operator=(NarrowArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NarrowArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NarrowArea* internal_default_instance() {
    return reinterpret_cast<const NarrowArea*>(
               &_NarrowArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NarrowArea* other);
  friend void swap(NarrowArea& a, NarrowArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NarrowArea* New() const final {
    return CreateMaybeMessage<NarrowArea>(NULL);
  }

  NarrowArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NarrowArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NarrowArea& from);
  void MergeFrom(const NarrowArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NarrowArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string material = 6;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 6;
  const ::std::string& material() const;
  void set_material(const ::std::string& value);
  #if LANG_CXX11
  void set_material(::std::string&& value);
  #endif
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  ::std::string* mutable_material();
  ::std::string* release_material();
  void set_allocated_material(::std::string* material);

  // optional string color = 7;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string static_area = 8;
  bool has_static_area() const;
  void clear_static_area();
  static const int kStaticAreaFieldNumber = 8;
  const ::std::string& static_area() const;
  void set_static_area(const ::std::string& value);
  #if LANG_CXX11
  void set_static_area(::std::string&& value);
  #endif
  void set_static_area(const char* value);
  void set_static_area(const char* value, size_t size);
  ::std::string* mutable_static_area();
  ::std::string* release_static_area();
  void set_allocated_static_area(::std::string* static_area);

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // optional double width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  double width() const;
  void set_width(double value);

  // optional double length = 4;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  double length() const;
  void set_length(double value);

  // optional double speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  double speed() const;
  void set_speed(double value);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.NarrowArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();
  void set_has_width();
  void clear_has_width();
  void set_has_length();
  void clear_has_length();
  void set_has_speed();
  void clear_has_speed();
  void set_has_material();
  void clear_has_material();
  void set_has_color();
  void clear_has_color();
  void set_has_static_area();
  void clear_has_static_area();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr material_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr static_area_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  double width_;
  double length_;
  double speed_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarkArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.MarkArea) */ {
 public:
  MarkArea();
  virtual ~MarkArea();

  MarkArea(const MarkArea& from);

  inline MarkArea& operator=(const MarkArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkArea(MarkArea&& from) noexcept
    : MarkArea() {
    *this = ::std::move(from);
  }

  inline MarkArea& operator=(MarkArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarkArea* internal_default_instance() {
    return reinterpret_cast<const MarkArea*>(
               &_MarkArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MarkArea* other);
  friend void swap(MarkArea& a, MarkArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkArea* New() const final {
    return CreateMaybeMessage<MarkArea>(NULL);
  }

  MarkArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarkArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarkArea& from);
  void MergeFrom(const MarkArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string color = 4;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 4;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string material = 5;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 5;
  const ::std::string& material() const;
  void set_material(const ::std::string& value);
  #if LANG_CXX11
  void set_material(::std::string&& value);
  #endif
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  ::std::string* mutable_material();
  ::std::string* release_material();
  void set_allocated_material(::std::string* material);

  // optional string static_area = 6;
  bool has_static_area() const;
  void clear_static_area();
  static const int kStaticAreaFieldNumber = 6;
  const ::std::string& static_area() const;
  void set_static_area(const ::std::string& value);
  #if LANG_CXX11
  void set_static_area(::std::string&& value);
  #endif
  void set_static_area(const char* value);
  void set_static_area(const char* value, size_t size);
  ::std::string* mutable_static_area();
  ::std::string* release_static_area();
  void set_allocated_static_area(::std::string* static_area);

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // optional double speed = 3;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  double speed() const;
  void set_speed(double value);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.MarkArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();
  void set_has_speed();
  void clear_has_speed();
  void set_has_color();
  void clear_has_color();
  void set_has_material();
  void clear_has_material();
  void set_has_static_area();
  void clear_has_static_area();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr material_;
  ::google::protobuf::internal::ArenaStringPtr static_area_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  double speed_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProhibitedArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.ProhibitedArea) */ {
 public:
  ProhibitedArea();
  virtual ~ProhibitedArea();

  ProhibitedArea(const ProhibitedArea& from);

  inline ProhibitedArea& operator=(const ProhibitedArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProhibitedArea(ProhibitedArea&& from) noexcept
    : ProhibitedArea() {
    *this = ::std::move(from);
  }

  inline ProhibitedArea& operator=(ProhibitedArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProhibitedArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProhibitedArea* internal_default_instance() {
    return reinterpret_cast<const ProhibitedArea*>(
               &_ProhibitedArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ProhibitedArea* other);
  friend void swap(ProhibitedArea& a, ProhibitedArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProhibitedArea* New() const final {
    return CreateMaybeMessage<ProhibitedArea>(NULL);
  }

  ProhibitedArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProhibitedArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProhibitedArea& from);
  void MergeFrom(const ProhibitedArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProhibitedArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reason = 3;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.ProhibitedArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();
  void set_has_reason();
  void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlackArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cvte.hdmap.BlackArea) */ {
 public:
  BlackArea();
  virtual ~BlackArea();

  BlackArea(const BlackArea& from);

  inline BlackArea& operator=(const BlackArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlackArea(BlackArea&& from) noexcept
    : BlackArea() {
    *this = ::std::move(from);
  }

  inline BlackArea& operator=(BlackArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlackArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlackArea* internal_default_instance() {
    return reinterpret_cast<const BlackArea*>(
               &_BlackArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BlackArea* other);
  friend void swap(BlackArea& a, BlackArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlackArea* New() const final {
    return CreateMaybeMessage<BlackArea>(NULL);
  }

  BlackArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlackArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlackArea& from);
  void MergeFrom(const BlackArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cvte.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cvte::hdmap::Id& _internal_id() const;
  public:
  const ::cvte::hdmap::Id& id() const;
  ::cvte::hdmap::Id* release_id();
  ::cvte::hdmap::Id* mutable_id();
  void set_allocated_id(::cvte::hdmap::Id* id);

  // optional .cvte.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  private:
  const ::cvte::hdmap::Polygon& _internal_polygon() const;
  public:
  const ::cvte::hdmap::Polygon& polygon() const;
  ::cvte::hdmap::Polygon* release_polygon();
  ::cvte::hdmap::Polygon* mutable_polygon();
  void set_allocated_polygon(::cvte::hdmap::Polygon* polygon);

  // @@protoc_insertion_point(class_scope:cvte.hdmap.BlackArea)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::cvte::hdmap::Id* id_;
  ::cvte::hdmap::Polygon* polygon_;
  friend struct ::protobuf_map_5fc5_5farea_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapArea

// optional .cvte.hdmap.Id id = 1;
inline bool MapArea::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapArea::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::cvte::hdmap::Id& MapArea::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& MapArea::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.MapArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* MapArea::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.MapArea.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* MapArea::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.MapArea.id)
  return id_;
}
inline void MapArea::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.MapArea.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool MapArea::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapArea::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapArea::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cvte::hdmap::Polygon& MapArea::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& MapArea::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.MapArea.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* MapArea::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.MapArea.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* MapArea::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.MapArea.polygon)
  return polygon_;
}
inline void MapArea::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.MapArea.polygon)
}

// repeated .cvte.hdmap.Id cleanArea_Id = 3;
inline int MapArea::cleanarea_id_size() const {
  return cleanarea_id_.size();
}
inline ::cvte::hdmap::Id* MapArea::mutable_cleanarea_id(int index) {
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.MapArea.cleanArea_Id)
  return cleanarea_id_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >*
MapArea::mutable_cleanarea_id() {
  // @@protoc_insertion_point(field_mutable_list:cvte.hdmap.MapArea.cleanArea_Id)
  return &cleanarea_id_;
}
inline const ::cvte::hdmap::Id& MapArea::cleanarea_id(int index) const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.MapArea.cleanArea_Id)
  return cleanarea_id_.Get(index);
}
inline ::cvte::hdmap::Id* MapArea::add_cleanarea_id() {
  // @@protoc_insertion_point(field_add:cvte.hdmap.MapArea.cleanArea_Id)
  return cleanarea_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cvte::hdmap::Id >&
MapArea::cleanarea_id() const {
  // @@protoc_insertion_point(field_list:cvte.hdmap.MapArea.cleanArea_Id)
  return cleanarea_id_;
}

// -------------------------------------------------------------------

// CleanArea

// optional .cvte.hdmap.Id id = 1;
inline bool CleanArea::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CleanArea::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CleanArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::cvte::hdmap::Id& CleanArea::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& CleanArea::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.CleanArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* CleanArea::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.CleanArea.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* CleanArea::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.CleanArea.id)
  return id_;
}
inline void CleanArea::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.CleanArea.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool CleanArea::has_polygon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CleanArea::set_has_polygon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CleanArea::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::cvte::hdmap::Polygon& CleanArea::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& CleanArea::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.CleanArea.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* CleanArea::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.CleanArea.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* CleanArea::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.CleanArea.polygon)
  return polygon_;
}
inline void CleanArea::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.CleanArea.polygon)
}

// optional double speed = 3;
inline bool CleanArea::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CleanArea::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CleanArea::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CleanArea::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double CleanArea::speed() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.CleanArea.speed)
  return speed_;
}
inline void CleanArea::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.CleanArea.speed)
}

// optional string material = 4;
inline bool CleanArea::has_material() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CleanArea::set_has_material() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CleanArea::clear_has_material() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CleanArea::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_material();
}
inline const ::std::string& CleanArea::material() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.CleanArea.material)
  return material_.GetNoArena();
}
inline void CleanArea::set_material(const ::std::string& value) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.CleanArea.material)
}
#if LANG_CXX11
inline void CleanArea::set_material(::std::string&& value) {
  set_has_material();
  material_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.CleanArea.material)
}
#endif
inline void CleanArea::set_material(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.CleanArea.material)
}
inline void CleanArea::set_material(const char* value, size_t size) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.CleanArea.material)
}
inline ::std::string* CleanArea::mutable_material() {
  set_has_material();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.CleanArea.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanArea::release_material() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.CleanArea.material)
  if (!has_material()) {
    return NULL;
  }
  clear_has_material();
  return material_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanArea::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    set_has_material();
  } else {
    clear_has_material();
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.CleanArea.material)
}

// optional string color = 5;
inline bool CleanArea::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CleanArea::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CleanArea::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CleanArea::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& CleanArea::color() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.CleanArea.color)
  return color_.GetNoArena();
}
inline void CleanArea::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.CleanArea.color)
}
#if LANG_CXX11
inline void CleanArea::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.CleanArea.color)
}
#endif
inline void CleanArea::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.CleanArea.color)
}
inline void CleanArea::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.CleanArea.color)
}
inline ::std::string* CleanArea::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.CleanArea.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanArea::release_color() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.CleanArea.color)
  if (!has_color()) {
    return NULL;
  }
  clear_has_color();
  return color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanArea::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.CleanArea.color)
}

// optional string static_area = 6;
inline bool CleanArea::has_static_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CleanArea::set_has_static_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CleanArea::clear_has_static_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CleanArea::clear_static_area() {
  static_area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_static_area();
}
inline const ::std::string& CleanArea::static_area() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.CleanArea.static_area)
  return static_area_.GetNoArena();
}
inline void CleanArea::set_static_area(const ::std::string& value) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.CleanArea.static_area)
}
#if LANG_CXX11
inline void CleanArea::set_static_area(::std::string&& value) {
  set_has_static_area();
  static_area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.CleanArea.static_area)
}
#endif
inline void CleanArea::set_static_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.CleanArea.static_area)
}
inline void CleanArea::set_static_area(const char* value, size_t size) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.CleanArea.static_area)
}
inline ::std::string* CleanArea::mutable_static_area() {
  set_has_static_area();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.CleanArea.static_area)
  return static_area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanArea::release_static_area() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.CleanArea.static_area)
  if (!has_static_area()) {
    return NULL;
  }
  clear_has_static_area();
  return static_area_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanArea::set_allocated_static_area(::std::string* static_area) {
  if (static_area != NULL) {
    set_has_static_area();
  } else {
    clear_has_static_area();
  }
  static_area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), static_area);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.CleanArea.static_area)
}

// -------------------------------------------------------------------

// SlopeArea

// optional .cvte.hdmap.Id id = 1;
inline bool SlopeArea::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SlopeArea::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SlopeArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::cvte::hdmap::Id& SlopeArea::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& SlopeArea::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.SlopeArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* SlopeArea::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.SlopeArea.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* SlopeArea::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.SlopeArea.id)
  return id_;
}
inline void SlopeArea::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.SlopeArea.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool SlopeArea::has_polygon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SlopeArea::set_has_polygon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SlopeArea::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::cvte::hdmap::Polygon& SlopeArea::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& SlopeArea::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.SlopeArea.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* SlopeArea::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.SlopeArea.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* SlopeArea::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.SlopeArea.polygon)
  return polygon_;
}
inline void SlopeArea::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.SlopeArea.polygon)
}

// optional double angle = 3;
inline bool SlopeArea::has_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SlopeArea::set_has_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SlopeArea::clear_has_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SlopeArea::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double SlopeArea::angle() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.SlopeArea.angle)
  return angle_;
}
inline void SlopeArea::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.SlopeArea.angle)
}

// optional double length = 4;
inline bool SlopeArea::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SlopeArea::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SlopeArea::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SlopeArea::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double SlopeArea::length() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.SlopeArea.length)
  return length_;
}
inline void SlopeArea::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.SlopeArea.length)
}

// optional double speed = 5;
inline bool SlopeArea::has_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SlopeArea::set_has_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SlopeArea::clear_has_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SlopeArea::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double SlopeArea::speed() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.SlopeArea.speed)
  return speed_;
}
inline void SlopeArea::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.SlopeArea.speed)
}

// optional string material = 6;
inline bool SlopeArea::has_material() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlopeArea::set_has_material() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlopeArea::clear_has_material() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlopeArea::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_material();
}
inline const ::std::string& SlopeArea::material() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.SlopeArea.material)
  return material_.GetNoArena();
}
inline void SlopeArea::set_material(const ::std::string& value) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.SlopeArea.material)
}
#if LANG_CXX11
inline void SlopeArea::set_material(::std::string&& value) {
  set_has_material();
  material_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.SlopeArea.material)
}
#endif
inline void SlopeArea::set_material(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.SlopeArea.material)
}
inline void SlopeArea::set_material(const char* value, size_t size) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.SlopeArea.material)
}
inline ::std::string* SlopeArea::mutable_material() {
  set_has_material();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.SlopeArea.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SlopeArea::release_material() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.SlopeArea.material)
  if (!has_material()) {
    return NULL;
  }
  clear_has_material();
  return material_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SlopeArea::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    set_has_material();
  } else {
    clear_has_material();
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.SlopeArea.material)
}

// optional string color = 7;
inline bool SlopeArea::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlopeArea::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlopeArea::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlopeArea::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& SlopeArea::color() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.SlopeArea.color)
  return color_.GetNoArena();
}
inline void SlopeArea::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.SlopeArea.color)
}
#if LANG_CXX11
inline void SlopeArea::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.SlopeArea.color)
}
#endif
inline void SlopeArea::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.SlopeArea.color)
}
inline void SlopeArea::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.SlopeArea.color)
}
inline ::std::string* SlopeArea::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.SlopeArea.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SlopeArea::release_color() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.SlopeArea.color)
  if (!has_color()) {
    return NULL;
  }
  clear_has_color();
  return color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SlopeArea::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.SlopeArea.color)
}

// optional string static_area = 8;
inline bool SlopeArea::has_static_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SlopeArea::set_has_static_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SlopeArea::clear_has_static_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SlopeArea::clear_static_area() {
  static_area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_static_area();
}
inline const ::std::string& SlopeArea::static_area() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.SlopeArea.static_area)
  return static_area_.GetNoArena();
}
inline void SlopeArea::set_static_area(const ::std::string& value) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.SlopeArea.static_area)
}
#if LANG_CXX11
inline void SlopeArea::set_static_area(::std::string&& value) {
  set_has_static_area();
  static_area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.SlopeArea.static_area)
}
#endif
inline void SlopeArea::set_static_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.SlopeArea.static_area)
}
inline void SlopeArea::set_static_area(const char* value, size_t size) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.SlopeArea.static_area)
}
inline ::std::string* SlopeArea::mutable_static_area() {
  set_has_static_area();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.SlopeArea.static_area)
  return static_area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SlopeArea::release_static_area() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.SlopeArea.static_area)
  if (!has_static_area()) {
    return NULL;
  }
  clear_has_static_area();
  return static_area_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SlopeArea::set_allocated_static_area(::std::string* static_area) {
  if (static_area != NULL) {
    set_has_static_area();
  } else {
    clear_has_static_area();
  }
  static_area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), static_area);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.SlopeArea.static_area)
}

// -------------------------------------------------------------------

// PitArea

// optional .cvte.hdmap.Id id = 1;
inline bool PitArea::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PitArea::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PitArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::cvte::hdmap::Id& PitArea::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& PitArea::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.PitArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* PitArea::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.PitArea.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* PitArea::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PitArea.id)
  return id_;
}
inline void PitArea::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.PitArea.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool PitArea::has_polygon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PitArea::set_has_polygon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PitArea::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::cvte::hdmap::Polygon& PitArea::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& PitArea::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.PitArea.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* PitArea::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.PitArea.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* PitArea::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PitArea.polygon)
  return polygon_;
}
inline void PitArea::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.PitArea.polygon)
}

// optional double angle = 3;
inline bool PitArea::has_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PitArea::set_has_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PitArea::clear_has_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PitArea::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double PitArea::angle() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PitArea.angle)
  return angle_;
}
inline void PitArea::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.PitArea.angle)
}

// optional double length = 4;
inline bool PitArea::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PitArea::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PitArea::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PitArea::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double PitArea::length() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PitArea.length)
  return length_;
}
inline void PitArea::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.PitArea.length)
}

// optional double speed = 5;
inline bool PitArea::has_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PitArea::set_has_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PitArea::clear_has_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PitArea::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double PitArea::speed() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PitArea.speed)
  return speed_;
}
inline void PitArea::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.PitArea.speed)
}

// optional string material = 6;
inline bool PitArea::has_material() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PitArea::set_has_material() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PitArea::clear_has_material() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PitArea::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_material();
}
inline const ::std::string& PitArea::material() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PitArea.material)
  return material_.GetNoArena();
}
inline void PitArea::set_material(const ::std::string& value) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.PitArea.material)
}
#if LANG_CXX11
inline void PitArea::set_material(::std::string&& value) {
  set_has_material();
  material_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.PitArea.material)
}
#endif
inline void PitArea::set_material(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.PitArea.material)
}
inline void PitArea::set_material(const char* value, size_t size) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.PitArea.material)
}
inline ::std::string* PitArea::mutable_material() {
  set_has_material();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PitArea.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PitArea::release_material() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.PitArea.material)
  if (!has_material()) {
    return NULL;
  }
  clear_has_material();
  return material_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PitArea::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    set_has_material();
  } else {
    clear_has_material();
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.PitArea.material)
}

// optional string color = 7;
inline bool PitArea::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PitArea::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PitArea::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PitArea::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& PitArea::color() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PitArea.color)
  return color_.GetNoArena();
}
inline void PitArea::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.PitArea.color)
}
#if LANG_CXX11
inline void PitArea::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.PitArea.color)
}
#endif
inline void PitArea::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.PitArea.color)
}
inline void PitArea::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.PitArea.color)
}
inline ::std::string* PitArea::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PitArea.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PitArea::release_color() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.PitArea.color)
  if (!has_color()) {
    return NULL;
  }
  clear_has_color();
  return color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PitArea::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.PitArea.color)
}

// optional string static_area = 8;
inline bool PitArea::has_static_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PitArea::set_has_static_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PitArea::clear_has_static_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PitArea::clear_static_area() {
  static_area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_static_area();
}
inline const ::std::string& PitArea::static_area() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.PitArea.static_area)
  return static_area_.GetNoArena();
}
inline void PitArea::set_static_area(const ::std::string& value) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.PitArea.static_area)
}
#if LANG_CXX11
inline void PitArea::set_static_area(::std::string&& value) {
  set_has_static_area();
  static_area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.PitArea.static_area)
}
#endif
inline void PitArea::set_static_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.PitArea.static_area)
}
inline void PitArea::set_static_area(const char* value, size_t size) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.PitArea.static_area)
}
inline ::std::string* PitArea::mutable_static_area() {
  set_has_static_area();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.PitArea.static_area)
  return static_area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PitArea::release_static_area() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.PitArea.static_area)
  if (!has_static_area()) {
    return NULL;
  }
  clear_has_static_area();
  return static_area_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PitArea::set_allocated_static_area(::std::string* static_area) {
  if (static_area != NULL) {
    set_has_static_area();
  } else {
    clear_has_static_area();
  }
  static_area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), static_area);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.PitArea.static_area)
}

// -------------------------------------------------------------------

// Elevator

// optional .cvte.hdmap.Id id = 1;
inline bool Elevator::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Elevator::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Elevator::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::cvte::hdmap::Id& Elevator::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& Elevator::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.Elevator.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* Elevator::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.Elevator.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* Elevator::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Elevator.id)
  return id_;
}
inline void Elevator::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.Elevator.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool Elevator::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Elevator::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Elevator::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cvte::hdmap::Polygon& Elevator::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& Elevator::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.Elevator.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* Elevator::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.Elevator.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* Elevator::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.Elevator.polygon)
  return polygon_;
}
inline void Elevator::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.Elevator.polygon)
}

// -------------------------------------------------------------------

// NarrowArea

// optional .cvte.hdmap.Id id = 1;
inline bool NarrowArea::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NarrowArea::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NarrowArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::cvte::hdmap::Id& NarrowArea::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& NarrowArea::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.NarrowArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* NarrowArea::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.NarrowArea.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* NarrowArea::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.NarrowArea.id)
  return id_;
}
inline void NarrowArea::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.NarrowArea.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool NarrowArea::has_polygon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NarrowArea::set_has_polygon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NarrowArea::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::cvte::hdmap::Polygon& NarrowArea::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& NarrowArea::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.NarrowArea.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* NarrowArea::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.NarrowArea.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* NarrowArea::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.NarrowArea.polygon)
  return polygon_;
}
inline void NarrowArea::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.NarrowArea.polygon)
}

// optional double width = 3;
inline bool NarrowArea::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NarrowArea::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NarrowArea::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NarrowArea::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double NarrowArea::width() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.NarrowArea.width)
  return width_;
}
inline void NarrowArea::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.NarrowArea.width)
}

// optional double length = 4;
inline bool NarrowArea::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NarrowArea::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NarrowArea::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NarrowArea::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double NarrowArea::length() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.NarrowArea.length)
  return length_;
}
inline void NarrowArea::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.NarrowArea.length)
}

// optional double speed = 5;
inline bool NarrowArea::has_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NarrowArea::set_has_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NarrowArea::clear_has_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NarrowArea::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double NarrowArea::speed() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.NarrowArea.speed)
  return speed_;
}
inline void NarrowArea::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.NarrowArea.speed)
}

// optional string material = 6;
inline bool NarrowArea::has_material() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NarrowArea::set_has_material() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NarrowArea::clear_has_material() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NarrowArea::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_material();
}
inline const ::std::string& NarrowArea::material() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.NarrowArea.material)
  return material_.GetNoArena();
}
inline void NarrowArea::set_material(const ::std::string& value) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.NarrowArea.material)
}
#if LANG_CXX11
inline void NarrowArea::set_material(::std::string&& value) {
  set_has_material();
  material_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.NarrowArea.material)
}
#endif
inline void NarrowArea::set_material(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.NarrowArea.material)
}
inline void NarrowArea::set_material(const char* value, size_t size) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.NarrowArea.material)
}
inline ::std::string* NarrowArea::mutable_material() {
  set_has_material();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.NarrowArea.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NarrowArea::release_material() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.NarrowArea.material)
  if (!has_material()) {
    return NULL;
  }
  clear_has_material();
  return material_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NarrowArea::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    set_has_material();
  } else {
    clear_has_material();
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.NarrowArea.material)
}

// optional string color = 7;
inline bool NarrowArea::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NarrowArea::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NarrowArea::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NarrowArea::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& NarrowArea::color() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.NarrowArea.color)
  return color_.GetNoArena();
}
inline void NarrowArea::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.NarrowArea.color)
}
#if LANG_CXX11
inline void NarrowArea::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.NarrowArea.color)
}
#endif
inline void NarrowArea::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.NarrowArea.color)
}
inline void NarrowArea::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.NarrowArea.color)
}
inline ::std::string* NarrowArea::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.NarrowArea.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NarrowArea::release_color() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.NarrowArea.color)
  if (!has_color()) {
    return NULL;
  }
  clear_has_color();
  return color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NarrowArea::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.NarrowArea.color)
}

// optional string static_area = 8;
inline bool NarrowArea::has_static_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NarrowArea::set_has_static_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NarrowArea::clear_has_static_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NarrowArea::clear_static_area() {
  static_area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_static_area();
}
inline const ::std::string& NarrowArea::static_area() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.NarrowArea.static_area)
  return static_area_.GetNoArena();
}
inline void NarrowArea::set_static_area(const ::std::string& value) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.NarrowArea.static_area)
}
#if LANG_CXX11
inline void NarrowArea::set_static_area(::std::string&& value) {
  set_has_static_area();
  static_area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.NarrowArea.static_area)
}
#endif
inline void NarrowArea::set_static_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.NarrowArea.static_area)
}
inline void NarrowArea::set_static_area(const char* value, size_t size) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.NarrowArea.static_area)
}
inline ::std::string* NarrowArea::mutable_static_area() {
  set_has_static_area();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.NarrowArea.static_area)
  return static_area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NarrowArea::release_static_area() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.NarrowArea.static_area)
  if (!has_static_area()) {
    return NULL;
  }
  clear_has_static_area();
  return static_area_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NarrowArea::set_allocated_static_area(::std::string* static_area) {
  if (static_area != NULL) {
    set_has_static_area();
  } else {
    clear_has_static_area();
  }
  static_area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), static_area);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.NarrowArea.static_area)
}

// -------------------------------------------------------------------

// MarkArea

// optional .cvte.hdmap.Id id = 1;
inline bool MarkArea::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarkArea::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarkArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::cvte::hdmap::Id& MarkArea::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& MarkArea::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.MarkArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* MarkArea::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.MarkArea.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* MarkArea::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.MarkArea.id)
  return id_;
}
inline void MarkArea::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.MarkArea.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool MarkArea::has_polygon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarkArea::set_has_polygon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarkArea::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::cvte::hdmap::Polygon& MarkArea::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& MarkArea::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.MarkArea.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* MarkArea::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.MarkArea.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* MarkArea::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.MarkArea.polygon)
  return polygon_;
}
inline void MarkArea::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.MarkArea.polygon)
}

// optional double speed = 3;
inline bool MarkArea::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarkArea::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarkArea::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarkArea::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double MarkArea::speed() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.MarkArea.speed)
  return speed_;
}
inline void MarkArea::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:cvte.hdmap.MarkArea.speed)
}

// optional string color = 4;
inline bool MarkArea::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkArea::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkArea::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkArea::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& MarkArea::color() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.MarkArea.color)
  return color_.GetNoArena();
}
inline void MarkArea::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.MarkArea.color)
}
#if LANG_CXX11
inline void MarkArea::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.MarkArea.color)
}
#endif
inline void MarkArea::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.MarkArea.color)
}
inline void MarkArea::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.MarkArea.color)
}
inline ::std::string* MarkArea::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.MarkArea.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkArea::release_color() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.MarkArea.color)
  if (!has_color()) {
    return NULL;
  }
  clear_has_color();
  return color_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkArea::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.MarkArea.color)
}

// optional string material = 5;
inline bool MarkArea::has_material() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkArea::set_has_material() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkArea::clear_has_material() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkArea::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_material();
}
inline const ::std::string& MarkArea::material() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.MarkArea.material)
  return material_.GetNoArena();
}
inline void MarkArea::set_material(const ::std::string& value) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.MarkArea.material)
}
#if LANG_CXX11
inline void MarkArea::set_material(::std::string&& value) {
  set_has_material();
  material_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.MarkArea.material)
}
#endif
inline void MarkArea::set_material(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.MarkArea.material)
}
inline void MarkArea::set_material(const char* value, size_t size) {
  set_has_material();
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.MarkArea.material)
}
inline ::std::string* MarkArea::mutable_material() {
  set_has_material();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.MarkArea.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkArea::release_material() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.MarkArea.material)
  if (!has_material()) {
    return NULL;
  }
  clear_has_material();
  return material_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkArea::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    set_has_material();
  } else {
    clear_has_material();
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.MarkArea.material)
}

// optional string static_area = 6;
inline bool MarkArea::has_static_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarkArea::set_has_static_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarkArea::clear_has_static_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarkArea::clear_static_area() {
  static_area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_static_area();
}
inline const ::std::string& MarkArea::static_area() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.MarkArea.static_area)
  return static_area_.GetNoArena();
}
inline void MarkArea::set_static_area(const ::std::string& value) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.MarkArea.static_area)
}
#if LANG_CXX11
inline void MarkArea::set_static_area(::std::string&& value) {
  set_has_static_area();
  static_area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.MarkArea.static_area)
}
#endif
inline void MarkArea::set_static_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.MarkArea.static_area)
}
inline void MarkArea::set_static_area(const char* value, size_t size) {
  set_has_static_area();
  static_area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.MarkArea.static_area)
}
inline ::std::string* MarkArea::mutable_static_area() {
  set_has_static_area();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.MarkArea.static_area)
  return static_area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkArea::release_static_area() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.MarkArea.static_area)
  if (!has_static_area()) {
    return NULL;
  }
  clear_has_static_area();
  return static_area_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkArea::set_allocated_static_area(::std::string* static_area) {
  if (static_area != NULL) {
    set_has_static_area();
  } else {
    clear_has_static_area();
  }
  static_area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), static_area);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.MarkArea.static_area)
}

// -------------------------------------------------------------------

// ProhibitedArea

// optional .cvte.hdmap.Id id = 1;
inline bool ProhibitedArea::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProhibitedArea::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProhibitedArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cvte::hdmap::Id& ProhibitedArea::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& ProhibitedArea::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.ProhibitedArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* ProhibitedArea::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.ProhibitedArea.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* ProhibitedArea::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.ProhibitedArea.id)
  return id_;
}
inline void ProhibitedArea::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ProhibitedArea.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool ProhibitedArea::has_polygon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProhibitedArea::set_has_polygon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProhibitedArea::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::cvte::hdmap::Polygon& ProhibitedArea::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& ProhibitedArea::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.ProhibitedArea.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* ProhibitedArea::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.ProhibitedArea.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* ProhibitedArea::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.ProhibitedArea.polygon)
  return polygon_;
}
inline void ProhibitedArea::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ProhibitedArea.polygon)
}

// optional string reason = 3;
inline bool ProhibitedArea::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProhibitedArea::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProhibitedArea::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProhibitedArea::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& ProhibitedArea::reason() const {
  // @@protoc_insertion_point(field_get:cvte.hdmap.ProhibitedArea.reason)
  return reason_.GetNoArena();
}
inline void ProhibitedArea::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cvte.hdmap.ProhibitedArea.reason)
}
#if LANG_CXX11
inline void ProhibitedArea::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cvte.hdmap.ProhibitedArea.reason)
}
#endif
inline void ProhibitedArea::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cvte.hdmap.ProhibitedArea.reason)
}
inline void ProhibitedArea::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cvte.hdmap.ProhibitedArea.reason)
}
inline ::std::string* ProhibitedArea::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.ProhibitedArea.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProhibitedArea::release_reason() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.ProhibitedArea.reason)
  if (!has_reason()) {
    return NULL;
  }
  clear_has_reason();
  return reason_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProhibitedArea::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.ProhibitedArea.reason)
}

// -------------------------------------------------------------------

// BlackArea

// optional .cvte.hdmap.Id id = 1;
inline bool BlackArea::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlackArea::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlackArea::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::cvte::hdmap::Id& BlackArea::_internal_id() const {
  return *id_;
}
inline const ::cvte::hdmap::Id& BlackArea::id() const {
  const ::cvte::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.BlackArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Id*>(
      &::cvte::hdmap::_Id_default_instance_);
}
inline ::cvte::hdmap::Id* BlackArea::release_id() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.BlackArea.id)
  clear_has_id();
  ::cvte::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Id* BlackArea::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.BlackArea.id)
  return id_;
}
inline void BlackArea::set_allocated_id(::cvte::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.BlackArea.id)
}

// optional .cvte.hdmap.Polygon polygon = 2;
inline bool BlackArea::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlackArea::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlackArea::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cvte::hdmap::Polygon& BlackArea::_internal_polygon() const {
  return *polygon_;
}
inline const ::cvte::hdmap::Polygon& BlackArea::polygon() const {
  const ::cvte::hdmap::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:cvte.hdmap.BlackArea.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::cvte::hdmap::Polygon*>(
      &::cvte::hdmap::_Polygon_default_instance_);
}
inline ::cvte::hdmap::Polygon* BlackArea::release_polygon() {
  // @@protoc_insertion_point(field_release:cvte.hdmap.BlackArea.polygon)
  clear_has_polygon();
  ::cvte::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::cvte::hdmap::Polygon* BlackArea::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::cvte::hdmap::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cvte.hdmap.BlackArea.polygon)
  return polygon_;
}
inline void BlackArea::set_allocated_polygon(::cvte::hdmap::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(polygon_);
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:cvte.hdmap.BlackArea.polygon)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace cvte

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_map_5fc5_5farea_2eproto
