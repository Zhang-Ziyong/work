// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_c5_area.proto

#include "map_c5_area.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::
    protobuf::internal::SCCInfo<1>
        scc_info_Polygon;
}  // namespace protobuf_map_5fgeometry_2eproto
namespace protobuf_map_5fid_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fid_2eproto ::google::protobuf::
    internal::SCCInfo<0>
        scc_info_Id;
}  // namespace protobuf_map_5fid_2eproto
namespace cvte {
namespace hdmap {
class MapAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapArea> _instance;
} _MapArea_default_instance_;
class CleanAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CleanArea> _instance;
} _CleanArea_default_instance_;
class SlopeAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SlopeArea> _instance;
} _SlopeArea_default_instance_;
class PitAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PitArea> _instance;
} _PitArea_default_instance_;
class ElevatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Elevator> _instance;
} _Elevator_default_instance_;
class NarrowAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NarrowArea> _instance;
} _NarrowArea_default_instance_;
class MarkAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarkArea> _instance;
} _MarkArea_default_instance_;
class ProhibitedAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProhibitedArea> _instance;
} _ProhibitedArea_default_instance_;
class BlackAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlackArea> _instance;
} _BlackArea_default_instance_;
}  // namespace hdmap
}  // namespace cvte
namespace protobuf_map_5fc5_5farea_2eproto {
static void InitDefaultsMapArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_MapArea_default_instance_;
    new (ptr)::cvte::hdmap::MapArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::MapArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapArea = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsMapArea},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

static void InitDefaultsCleanArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_CleanArea_default_instance_;
    new (ptr)::cvte::hdmap::CleanArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::CleanArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CleanArea = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsCleanArea},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

static void InitDefaultsSlopeArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_SlopeArea_default_instance_;
    new (ptr)::cvte::hdmap::SlopeArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::SlopeArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SlopeArea = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsSlopeArea},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

static void InitDefaultsPitArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_PitArea_default_instance_;
    new (ptr)::cvte::hdmap::PitArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::PitArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PitArea = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsPitArea},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

static void InitDefaultsElevator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_Elevator_default_instance_;
    new (ptr)::cvte::hdmap::Elevator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::Elevator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Elevator = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsElevator},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

static void InitDefaultsNarrowArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_NarrowArea_default_instance_;
    new (ptr)::cvte::hdmap::NarrowArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::NarrowArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NarrowArea = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsNarrowArea},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

static void InitDefaultsMarkArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_MarkArea_default_instance_;
    new (ptr)::cvte::hdmap::MarkArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::MarkArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MarkArea = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsMarkArea},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

static void InitDefaultsProhibitedArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_ProhibitedArea_default_instance_;
    new (ptr)::cvte::hdmap::ProhibitedArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::ProhibitedArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ProhibitedArea = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsProhibitedArea},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

static void InitDefaultsBlackArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::cvte::hdmap::_BlackArea_default_instance_;
    new (ptr)::cvte::hdmap::BlackArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::BlackArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BlackArea = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsBlackArea},
    {
        &protobuf_map_5fid_2eproto::scc_info_Id.base,
        &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,
    }};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CleanArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SlopeArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PitArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Elevator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NarrowArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarkArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProhibitedArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlackArea.base);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32
    TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MapArea,
                                                       _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MapArea,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MapArea,
                                                       id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MapArea,
                                                       polygon_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MapArea,
                                                       cleanarea_id_),
        0,
        1,
        ~0u,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CleanArea,
                                                       _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CleanArea,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CleanArea,
                                                       id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CleanArea,
                                                       polygon_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CleanArea,
                                                       speed_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CleanArea,
                                                       material_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CleanArea,
                                                       color_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::CleanArea,
                                                       static_area_),
        3,
        4,
        5,
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       polygon_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       angle_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       length_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       speed_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       material_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       color_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SlopeArea,
                                                       static_area_),
        3,
        4,
        5,
        6,
        7,
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       polygon_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       angle_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       length_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       speed_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       material_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       color_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::PitArea,
                                                       static_area_),
        3,
        4,
        5,
        6,
        7,
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Elevator,
                                                       _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Elevator,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Elevator,
                                                       id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::Elevator,
                                                       polygon_),
        0,
        1,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, polygon_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, width_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, length_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, speed_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, material_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, color_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::NarrowArea, static_area_),
        3,
        4,
        5,
        6,
        7,
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MarkArea,
                                                       _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MarkArea,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MarkArea,
                                                       id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MarkArea,
                                                       polygon_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MarkArea,
                                                       speed_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MarkArea,
                                                       color_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MarkArea,
                                                       material_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::MarkArea,
                                                       static_area_),
        3,
        4,
        5,
        0,
        1,
        2,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::ProhibitedArea, _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::ProhibitedArea, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::ProhibitedArea, id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::ProhibitedArea, polygon_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::cvte::hdmap::ProhibitedArea, reason_),
        1,
        2,
        0,
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::BlackArea,
                                                       _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::BlackArea,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::BlackArea,
                                                       id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::BlackArea,
                                                       polygon_),
        0,
        1,
};
static const ::google::protobuf::internal::MigrationSchema
    schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 8, sizeof(::cvte::hdmap::MapArea)},
        {11, 22, sizeof(::cvte::hdmap::CleanArea)},
        {28, 41, sizeof(::cvte::hdmap::SlopeArea)},
        {49, 62, sizeof(::cvte::hdmap::PitArea)},
        {70, 77, sizeof(::cvte::hdmap::Elevator)},
        {79, 92, sizeof(::cvte::hdmap::NarrowArea)},
        {100, 111, sizeof(::cvte::hdmap::MarkArea)},
        {117, 125, sizeof(::cvte::hdmap::ProhibitedArea)},
        {128, 135, sizeof(::cvte::hdmap::BlackArea)},
};

static ::google::protobuf::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_MapArea_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_CleanArea_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_SlopeArea_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_PitArea_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_Elevator_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_NarrowArea_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_MarkArea_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_ProhibitedArea_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::cvte::hdmap::_BlackArea_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors("map_c5_area.proto", schemas, file_default_instances,
                    TableStruct::offsets, file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string &)
    GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string &) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
      protodesc_cold) = {
      "\n\021map_c5_area.proto\022\ncvte.hdmap\032\014map_id."
      "proto\032\022map_geometry.proto\"q\n\007MapArea\022\032\n\002"
      "id\030\001 \001(\0132\016.cvte.hdmap.Id\022$\n\007polygon\030\002 \001("
      "\0132\023.cvte.hdmap.Polygon\022$\n\014cleanArea_Id\030\003"
      " \003(\0132\016.cvte.hdmap.Id\"\222\001\n\tCleanArea\022\032\n\002id"
      "\030\001 \001(\0132\016.cvte.hdmap.Id\022$\n\007polygon\030\002 "
      "\001(\0132"
      "\023.cvte.hdmap.Polygon\022\r\n\005speed\030\003 "
      "\001(\001\022\020\n\010m"
      "aterial\030\004 \001(\t\022\r\n\005color\030\005 "
      "\001(\t\022\023\n\013static_a"
      "rea\030\006 \001(\t\"\261\001\n\tSlopeArea\022\032\n\002id\030\001 "
      "\001(\0132\016.cv"
      "te.hdmap.Id\022$\n\007polygon\030\002 \001(\0132\023.cvte.hdma"
      "p.Polygon\022\r\n\005angle\030\003 "
      "\001(\001\022\016\n\006length\030\004 \001(\001"
      "\022\r\n\005speed\030\005 \001(\001\022\020\n\010material\030\006 "
      "\001(\t\022\r\n\005col"
      "or\030\007 \001(\t\022\023\n\013static_area\030\010 "
      "\001(\t\"\257\001\n\007PitAre"
      "a\022\032\n\002id\030\001 \001(\0132\016.cvte.hdmap.Id\022$\n\007polygon"
      "\030\002 \001(\0132\023.cvte.hdmap.Polygon\022\r\n\005angle\030\003 \001"
      "(\001\022\016\n\006length\030\004 \001(\001\022\r\n\005speed\030\005 "
      "\001(\001\022\020\n\010mat"
      "erial\030\006 \001(\t\022\r\n\005color\030\007 "
      "\001(\t\022\023\n\013static_are"
      "a\030\010 \001(\t\"L\n\010Elevator\022\032\n\002id\030\001 "
      "\001(\0132\016.cvte.h"
      "dmap.Id\022$\n\007polygon\030\002 \001(\0132\023.cvte.hdmap.Po"
      "lygon\"\262\001\n\nNarrowArea\022\032\n\002id\030\001 "
      "\001(\0132\016.cvte."
      "hdmap.Id\022$\n\007polygon\030\002 \001(\0132\023.cvte.hdmap.P"
      "olygon\022\r\n\005width\030\003 \001(\001\022\016\n\006length\030\004 "
      "\001(\001\022\r\n"
      "\005speed\030\005 \001(\001\022\020\n\010material\030\006 "
      "\001(\t\022\r\n\005color\030"
      "\007 \001(\t\022\023\n\013static_area\030\010 "
      "\001(\t\"\221\001\n\010MarkArea\022"
      "\032\n\002id\030\001 "
      "\001(\0132\016.cvte.hdmap.Id\022$\n\007polygon\030\002"
      " \001(\0132\023.cvte.hdmap.Polygon\022\r\n\005speed\030\003 \001(\001"
      "\022\r\n\005color\030\004 \001(\t\022\020\n\010material\030\005 "
      "\001(\t\022\023\n\013sta"
      "tic_area\030\006 \001(\t\"b\n\016ProhibitedArea\022\032\n\002id\030\001"
      " \001(\0132\016.cvte.hdmap.Id\022$\n\007polygon\030\002 \001(\0132\023."
      "cvte.hdmap.Polygon\022\016\n\006reason\030\003 \001(\t\"M\n\tBl"
      "ackArea\022\032\n\002id\030\001 \001(\0132\016.cvte.hdmap.Id\022$\n\007p"
      "olygon\030\002 \001(\0132\023.cvte.hdmap.Polygon"};
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor,
                                                               1273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "map_c5_area.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fid_2eproto::AddDescriptors();
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;
}  // namespace protobuf_map_5fc5_5farea_2eproto
namespace cvte {
namespace hdmap {

// ===================================================================

void MapArea::InitAsDefaultInstance() {
  ::cvte::hdmap::_MapArea_default_instance_._instance.get_mutable()->id_ =
      const_cast<::cvte::hdmap::Id *>(
          ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_MapArea_default_instance_._instance.get_mutable()->polygon_ =
      const_cast<::cvte::hdmap::Polygon *>(
          ::cvte::hdmap::Polygon::internal_default_instance());
}
void MapArea::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void MapArea::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
void MapArea::clear_cleanarea_id() {
  cleanarea_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapArea::kIdFieldNumber;
const int MapArea::kPolygonFieldNumber;
const int MapArea::kCleanAreaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapArea::MapArea() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_MapArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.MapArea)
}
MapArea::MapArea(const MapArea &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cleanarea_id_(from.cleanarea_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.MapArea)
}

void MapArea::SharedCtor() {
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&polygon_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(polygon_));
}

MapArea::~MapArea() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.MapArea)
  SharedDtor();
}

void MapArea::SharedDtor() {
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void MapArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *MapArea::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const MapArea &MapArea::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_MapArea.base);
  return *internal_default_instance();
}

void MapArea::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cleanarea_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.MapArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cvte.hdmap.Id cleanArea_Id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, add_cleanarea_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.MapArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.MapArea)
  return false;
#undef DO_
}

void MapArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  // repeated .cvte.hdmap.Id cleanArea_Id = 3;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->cleanarea_id_size());
       i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->cleanarea_id(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.MapArea)
}

::google::protobuf::uint8 *MapArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.MapArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  // repeated .cvte.hdmap.Id cleanArea_Id = 3;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->cleanarea_id_size());
       i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(3, this->cleanarea_id(static_cast<int>(i)),
                                    deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.MapArea)
  return target;
}

size_t MapArea::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.MapArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  // repeated .cvte.hdmap.Id cleanArea_Id = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cleanarea_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cleanarea_id(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapArea::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.MapArea)
  GOOGLE_DCHECK_NE(&from, this);
  const MapArea *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapArea>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.MapArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.MapArea)
    MergeFrom(*source);
  }
}

void MapArea::MergeFrom(const MapArea &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.MapArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cleanarea_id_.MergeFrom(from.cleanarea_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
  }
}

void MapArea::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.MapArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void MapArea::CopyFrom(const MapArea &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.MapArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool MapArea::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void MapArea::Swap(MapArea *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void MapArea::InternalSwap(MapArea *other) {
  using std::swap;
  CastToBase(&cleanarea_id_)->InternalSwap(CastToBase(&other->cleanarea_id_));
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapArea::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void CleanArea::InitAsDefaultInstance() {
  ::cvte::hdmap::_CleanArea_default_instance_._instance.get_mutable()->id_ =
      const_cast<::cvte::hdmap::Id *>(
          ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_CleanArea_default_instance_._instance.get_mutable()
      ->polygon_ = const_cast<::cvte::hdmap::Polygon *>(
      ::cvte::hdmap::Polygon::internal_default_instance());
}
void CleanArea::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void CleanArea::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanArea::kIdFieldNumber;
const int CleanArea::kPolygonFieldNumber;
const int CleanArea::kSpeedFieldNumber;
const int CleanArea::kMaterialFieldNumber;
const int CleanArea::kColorFieldNumber;
const int CleanArea::kStaticAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanArea::CleanArea()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_CleanArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.CleanArea)
}
CleanArea::CleanArea(const CleanArea &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_material()) {
    material_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.material_);
  }
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.color_);
  }
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_static_area()) {
    static_area_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.static_area_);
  }
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.CleanArea)
}

void CleanArea::SharedCtor() {
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(speed_));
}

CleanArea::~CleanArea() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.CleanArea)
  SharedDtor();
}

void CleanArea::SharedDtor() {
  material_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void CleanArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *CleanArea::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const CleanArea &CleanArea::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_CleanArea.base);
  return *internal_default_instance();
}

void CleanArea::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.CleanArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      material_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      color_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      static_area_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CleanArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.CleanArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string material = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->material().data(),
              static_cast<int>(this->material().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.CleanArea.material");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->color().data(), static_cast<int>(this->color().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.CleanArea.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string static_area = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_static_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->static_area().data(),
              static_cast<int>(this->static_area().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.CleanArea.static_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.CleanArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.CleanArea)
  return false;
#undef DO_
}

void CleanArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.CleanArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  // optional double speed = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->speed(),
                                                              output);
  }

  // optional string material = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.CleanArea.material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->material(), output);
  }

  // optional string color = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.CleanArea.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        5, this->color(), output);
  }

  // optional string static_area = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.CleanArea.static_area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        6, this->static_area(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.CleanArea)
}

::google::protobuf::uint8 *CleanArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.CleanArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  // optional double speed = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        3, this->speed(), target);
  }

  // optional string material = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.CleanArea.material");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->material(), target);
  }

  // optional string color = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.CleanArea.color");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->color(), target);
  }

  // optional string static_area = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.CleanArea.static_area");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->static_area(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.CleanArea)
  return target;
}

size_t CleanArea::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.CleanArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string material = 4;
    if (has_material()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->material());
    }

    // optional string color = 5;
    if (has_color()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->color());
    }

    // optional string static_area = 6;
    if (has_static_area()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->static_area());
    }

    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }

    // optional double speed = 3;
    if (has_speed()) {
      total_size += 1 + 8;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanArea::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.CleanArea)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanArea *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanArea>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.CleanArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.CleanArea)
    MergeFrom(*source);
  }
}

void CleanArea::MergeFrom(const CleanArea &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.CleanArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_material();
      material_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.material_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_color();
      color_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.color_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_static_area();
      static_area_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.static_area_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000020u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CleanArea::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.CleanArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CleanArea::CopyFrom(const CleanArea &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.CleanArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CleanArea::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void CleanArea::Swap(CleanArea *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void CleanArea::InternalSwap(CleanArea *other) {
  using std::swap;
  material_.Swap(&other->material_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  color_.Swap(&other->color_,
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              GetArenaNoVirtual());
  static_area_.Swap(
      &other->static_area_,
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(speed_, other->speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CleanArea::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void SlopeArea::InitAsDefaultInstance() {
  ::cvte::hdmap::_SlopeArea_default_instance_._instance.get_mutable()->id_ =
      const_cast<::cvte::hdmap::Id *>(
          ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_SlopeArea_default_instance_._instance.get_mutable()
      ->polygon_ = const_cast<::cvte::hdmap::Polygon *>(
      ::cvte::hdmap::Polygon::internal_default_instance());
}
void SlopeArea::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void SlopeArea::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlopeArea::kIdFieldNumber;
const int SlopeArea::kPolygonFieldNumber;
const int SlopeArea::kAngleFieldNumber;
const int SlopeArea::kLengthFieldNumber;
const int SlopeArea::kSpeedFieldNumber;
const int SlopeArea::kMaterialFieldNumber;
const int SlopeArea::kColorFieldNumber;
const int SlopeArea::kStaticAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlopeArea::SlopeArea()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_SlopeArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.SlopeArea)
}
SlopeArea::SlopeArea(const SlopeArea &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_material()) {
    material_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.material_);
  }
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.color_);
  }
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_static_area()) {
    static_area_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.static_area_);
  }
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  ::memcpy(&angle_, &from.angle_,
           static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                               reinterpret_cast<char *>(&angle_)) +
               sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.SlopeArea)
}

void SlopeArea::SharedCtor() {
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(speed_));
}

SlopeArea::~SlopeArea() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.SlopeArea)
  SharedDtor();
}

void SlopeArea::SharedDtor() {
  material_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void SlopeArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *SlopeArea::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const SlopeArea &SlopeArea::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_SlopeArea.base);
  return *internal_default_instance();
}

void SlopeArea::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.SlopeArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      material_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      color_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      static_area_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&angle_, 0,
             static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                                 reinterpret_cast<char *>(&angle_)) +
                 sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SlopeArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.SlopeArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string material = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->material().data(),
              static_cast<int>(this->material().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.SlopeArea.material");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->color().data(), static_cast<int>(this->color().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.SlopeArea.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string static_area = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_static_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->static_area().data(),
              static_cast<int>(this->static_area().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.SlopeArea.static_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.SlopeArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.SlopeArea)
  return false;
#undef DO_
}

void SlopeArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.SlopeArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  // optional double angle = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angle(),
                                                              output);
  }

  // optional double length = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->length(),
                                                              output);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(),
                                                              output);
  }

  // optional string material = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.SlopeArea.material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        6, this->material(), output);
  }

  // optional string color = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.SlopeArea.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        7, this->color(), output);
  }

  // optional string static_area = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.SlopeArea.static_area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        8, this->static_area(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.SlopeArea)
}

::google::protobuf::uint8 *SlopeArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.SlopeArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  // optional double angle = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        3, this->angle(), target);
  }

  // optional double length = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        4, this->length(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        5, this->speed(), target);
  }

  // optional string material = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.SlopeArea.material");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->material(), target);
  }

  // optional string color = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.SlopeArea.color");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->color(), target);
  }

  // optional string static_area = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.SlopeArea.static_area");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->static_area(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.SlopeArea)
  return target;
}

size_t SlopeArea::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.SlopeArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string material = 6;
    if (has_material()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->material());
    }

    // optional string color = 7;
    if (has_color()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->color());
    }

    // optional string static_area = 8;
    if (has_static_area()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->static_area());
    }

    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }

    // optional double angle = 3;
    if (has_angle()) {
      total_size += 1 + 8;
    }

    // optional double length = 4;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlopeArea::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.SlopeArea)
  GOOGLE_DCHECK_NE(&from, this);
  const SlopeArea *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlopeArea>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.SlopeArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.SlopeArea)
    MergeFrom(*source);
  }
}

void SlopeArea::MergeFrom(const SlopeArea &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.SlopeArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_material();
      material_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.material_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_color();
      color_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.color_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_static_area();
      static_area_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.static_area_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000020u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000040u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SlopeArea::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.SlopeArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SlopeArea::CopyFrom(const SlopeArea &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.SlopeArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SlopeArea::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void SlopeArea::Swap(SlopeArea *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void SlopeArea::InternalSwap(SlopeArea *other) {
  using std::swap;
  material_.Swap(&other->material_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  color_.Swap(&other->color_,
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              GetArenaNoVirtual());
  static_area_.Swap(
      &other->static_area_,
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(angle_, other->angle_);
  swap(length_, other->length_);
  swap(speed_, other->speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SlopeArea::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void PitArea::InitAsDefaultInstance() {
  ::cvte::hdmap::_PitArea_default_instance_._instance.get_mutable()->id_ =
      const_cast<::cvte::hdmap::Id *>(
          ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_PitArea_default_instance_._instance.get_mutable()->polygon_ =
      const_cast<::cvte::hdmap::Polygon *>(
          ::cvte::hdmap::Polygon::internal_default_instance());
}
void PitArea::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void PitArea::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PitArea::kIdFieldNumber;
const int PitArea::kPolygonFieldNumber;
const int PitArea::kAngleFieldNumber;
const int PitArea::kLengthFieldNumber;
const int PitArea::kSpeedFieldNumber;
const int PitArea::kMaterialFieldNumber;
const int PitArea::kColorFieldNumber;
const int PitArea::kStaticAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PitArea::PitArea() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_PitArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.PitArea)
}
PitArea::PitArea(const PitArea &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_material()) {
    material_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.material_);
  }
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.color_);
  }
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_static_area()) {
    static_area_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.static_area_);
  }
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  ::memcpy(&angle_, &from.angle_,
           static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                               reinterpret_cast<char *>(&angle_)) +
               sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.PitArea)
}

void PitArea::SharedCtor() {
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(speed_));
}

PitArea::~PitArea() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.PitArea)
  SharedDtor();
}

void PitArea::SharedDtor() {
  material_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void PitArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *PitArea::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const PitArea &PitArea::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_PitArea.base);
  return *internal_default_instance();
}

void PitArea::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.PitArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      material_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      color_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      static_area_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&angle_, 0,
             static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                                 reinterpret_cast<char *>(&angle_)) +
                 sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PitArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.PitArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string material = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->material().data(),
              static_cast<int>(this->material().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.PitArea.material");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->color().data(), static_cast<int>(this->color().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.PitArea.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string static_area = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_static_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->static_area().data(),
              static_cast<int>(this->static_area().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.PitArea.static_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.PitArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.PitArea)
  return false;
#undef DO_
}

void PitArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.PitArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  // optional double angle = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angle(),
                                                              output);
  }

  // optional double length = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->length(),
                                                              output);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(),
                                                              output);
  }

  // optional string material = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.PitArea.material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        6, this->material(), output);
  }

  // optional string color = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.PitArea.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        7, this->color(), output);
  }

  // optional string static_area = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.PitArea.static_area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        8, this->static_area(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.PitArea)
}

::google::protobuf::uint8 *PitArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.PitArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  // optional double angle = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        3, this->angle(), target);
  }

  // optional double length = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        4, this->length(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        5, this->speed(), target);
  }

  // optional string material = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.PitArea.material");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->material(), target);
  }

  // optional string color = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.PitArea.color");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->color(), target);
  }

  // optional string static_area = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.PitArea.static_area");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->static_area(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.PitArea)
  return target;
}

size_t PitArea::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.PitArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string material = 6;
    if (has_material()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->material());
    }

    // optional string color = 7;
    if (has_color()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->color());
    }

    // optional string static_area = 8;
    if (has_static_area()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->static_area());
    }

    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }

    // optional double angle = 3;
    if (has_angle()) {
      total_size += 1 + 8;
    }

    // optional double length = 4;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PitArea::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.PitArea)
  GOOGLE_DCHECK_NE(&from, this);
  const PitArea *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PitArea>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.PitArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.PitArea)
    MergeFrom(*source);
  }
}

void PitArea::MergeFrom(const PitArea &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.PitArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_material();
      material_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.material_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_color();
      color_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.color_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_static_area();
      static_area_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.static_area_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000020u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000040u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PitArea::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.PitArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void PitArea::CopyFrom(const PitArea &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.PitArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool PitArea::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void PitArea::Swap(PitArea *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void PitArea::InternalSwap(PitArea *other) {
  using std::swap;
  material_.Swap(&other->material_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  color_.Swap(&other->color_,
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              GetArenaNoVirtual());
  static_area_.Swap(
      &other->static_area_,
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(angle_, other->angle_);
  swap(length_, other->length_);
  swap(speed_, other->speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PitArea::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void Elevator::InitAsDefaultInstance() {
  ::cvte::hdmap::_Elevator_default_instance_._instance.get_mutable()->id_ =
      const_cast<::cvte::hdmap::Id *>(
          ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_Elevator_default_instance_._instance.get_mutable()->polygon_ =
      const_cast<::cvte::hdmap::Polygon *>(
          ::cvte::hdmap::Polygon::internal_default_instance());
}
void Elevator::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void Elevator::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Elevator::kIdFieldNumber;
const int Elevator::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Elevator::Elevator()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_Elevator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.Elevator)
}
Elevator::Elevator(const Elevator &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.Elevator)
}

void Elevator::SharedCtor() {
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&polygon_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(polygon_));
}

Elevator::~Elevator() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.Elevator)
  SharedDtor();
}

void Elevator::SharedDtor() {
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void Elevator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *Elevator::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const Elevator &Elevator::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_Elevator.base);
  return *internal_default_instance();
}

void Elevator::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.Elevator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Elevator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.Elevator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.Elevator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.Elevator)
  return false;
#undef DO_
}

void Elevator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.Elevator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.Elevator)
}

::google::protobuf::uint8 *Elevator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.Elevator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.Elevator)
  return target;
}

size_t Elevator::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.Elevator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Elevator::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.Elevator)
  GOOGLE_DCHECK_NE(&from, this);
  const Elevator *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Elevator>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.Elevator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.Elevator)
    MergeFrom(*source);
  }
}

void Elevator::MergeFrom(const Elevator &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.Elevator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
  }
}

void Elevator::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.Elevator)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Elevator::CopyFrom(const Elevator &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.Elevator)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Elevator::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void Elevator::Swap(Elevator *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void Elevator::InternalSwap(Elevator *other) {
  using std::swap;
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Elevator::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void NarrowArea::InitAsDefaultInstance() {
  ::cvte::hdmap::_NarrowArea_default_instance_._instance.get_mutable()->id_ =
      const_cast<::cvte::hdmap::Id *>(
          ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_NarrowArea_default_instance_._instance.get_mutable()
      ->polygon_ = const_cast<::cvte::hdmap::Polygon *>(
      ::cvte::hdmap::Polygon::internal_default_instance());
}
void NarrowArea::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void NarrowArea::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NarrowArea::kIdFieldNumber;
const int NarrowArea::kPolygonFieldNumber;
const int NarrowArea::kWidthFieldNumber;
const int NarrowArea::kLengthFieldNumber;
const int NarrowArea::kSpeedFieldNumber;
const int NarrowArea::kMaterialFieldNumber;
const int NarrowArea::kColorFieldNumber;
const int NarrowArea::kStaticAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NarrowArea::NarrowArea()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_NarrowArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.NarrowArea)
}
NarrowArea::NarrowArea(const NarrowArea &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_material()) {
    material_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.material_);
  }
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.color_);
  }
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_static_area()) {
    static_area_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.static_area_);
  }
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
           static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                               reinterpret_cast<char *>(&width_)) +
               sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.NarrowArea)
}

void NarrowArea::SharedCtor() {
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(speed_));
}

NarrowArea::~NarrowArea() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.NarrowArea)
  SharedDtor();
}

void NarrowArea::SharedDtor() {
  material_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void NarrowArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *NarrowArea::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const NarrowArea &NarrowArea::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_NarrowArea.base);
  return *internal_default_instance();
}

void NarrowArea::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.NarrowArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      material_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      color_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      static_area_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&width_, 0,
             static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                                 reinterpret_cast<char *>(&width_)) +
                 sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NarrowArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.NarrowArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string material = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->material().data(),
              static_cast<int>(this->material().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.NarrowArea.material");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->color().data(), static_cast<int>(this->color().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.NarrowArea.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string static_area = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_static_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->static_area().data(),
              static_cast<int>(this->static_area().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.NarrowArea.static_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.NarrowArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.NarrowArea)
  return false;
#undef DO_
}

void NarrowArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.NarrowArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  // optional double width = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(),
                                                              output);
  }

  // optional double length = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->length(),
                                                              output);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(),
                                                              output);
  }

  // optional string material = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.NarrowArea.material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        6, this->material(), output);
  }

  // optional string color = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.NarrowArea.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        7, this->color(), output);
  }

  // optional string static_area = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.NarrowArea.static_area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        8, this->static_area(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.NarrowArea)
}

::google::protobuf::uint8 *NarrowArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.NarrowArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  // optional double width = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        3, this->width(), target);
  }

  // optional double length = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        4, this->length(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        5, this->speed(), target);
  }

  // optional string material = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.NarrowArea.material");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->material(), target);
  }

  // optional string color = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.NarrowArea.color");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->color(), target);
  }

  // optional string static_area = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.NarrowArea.static_area");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->static_area(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.NarrowArea)
  return target;
}

size_t NarrowArea::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.NarrowArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string material = 6;
    if (has_material()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->material());
    }

    // optional string color = 7;
    if (has_color()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->color());
    }

    // optional string static_area = 8;
    if (has_static_area()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->static_area());
    }

    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }

    // optional double width = 3;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double length = 4;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NarrowArea::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.NarrowArea)
  GOOGLE_DCHECK_NE(&from, this);
  const NarrowArea *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NarrowArea>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.NarrowArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.NarrowArea)
    MergeFrom(*source);
  }
}

void NarrowArea::MergeFrom(const NarrowArea &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.NarrowArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_material();
      material_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.material_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_color();
      color_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.color_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_static_area();
      static_area_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.static_area_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NarrowArea::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.NarrowArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void NarrowArea::CopyFrom(const NarrowArea &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.NarrowArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool NarrowArea::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void NarrowArea::Swap(NarrowArea *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void NarrowArea::InternalSwap(NarrowArea *other) {
  using std::swap;
  material_.Swap(&other->material_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  color_.Swap(&other->color_,
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              GetArenaNoVirtual());
  static_area_.Swap(
      &other->static_area_,
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(speed_, other->speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NarrowArea::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void MarkArea::InitAsDefaultInstance() {
  ::cvte::hdmap::_MarkArea_default_instance_._instance.get_mutable()->id_ =
      const_cast<::cvte::hdmap::Id *>(
          ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_MarkArea_default_instance_._instance.get_mutable()->polygon_ =
      const_cast<::cvte::hdmap::Polygon *>(
          ::cvte::hdmap::Polygon::internal_default_instance());
}
void MarkArea::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void MarkArea::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkArea::kIdFieldNumber;
const int MarkArea::kPolygonFieldNumber;
const int MarkArea::kSpeedFieldNumber;
const int MarkArea::kColorFieldNumber;
const int MarkArea::kMaterialFieldNumber;
const int MarkArea::kStaticAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkArea::MarkArea()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_MarkArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.MarkArea)
}
MarkArea::MarkArea(const MarkArea &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.color_);
  }
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_material()) {
    material_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.material_);
  }
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_static_area()) {
    static_area_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.static_area_);
  }
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.MarkArea)
}

void MarkArea::SharedCtor() {
  color_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  material_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&speed_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(speed_));
}

MarkArea::~MarkArea() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.MarkArea)
  SharedDtor();
}

void MarkArea::SharedDtor() {
  color_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  material_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  static_area_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void MarkArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *MarkArea::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const MarkArea &MarkArea::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_MarkArea.base);
  return *internal_default_instance();
}

void MarkArea::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.MarkArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      color_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      material_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      static_area_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarkArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.MarkArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               double,
               ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->color().data(), static_cast<int>(this->color().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.MarkArea.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string material = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->material().data(),
              static_cast<int>(this->material().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.MarkArea.material");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string static_area = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_static_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->static_area().data(),
              static_cast<int>(this->static_area().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.MarkArea.static_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.MarkArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.MarkArea)
  return false;
#undef DO_
}

void MarkArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.MarkArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  // optional double speed = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->speed(),
                                                              output);
  }

  // optional string color = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.MarkArea.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->color(), output);
  }

  // optional string material = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.MarkArea.material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        5, this->material(), output);
  }

  // optional string static_area = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.MarkArea.static_area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        6, this->static_area(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.MarkArea)
}

::google::protobuf::uint8 *MarkArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.MarkArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  // optional double speed = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(
        3, this->speed(), target);
  }

  // optional string color = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->color().data(), static_cast<int>(this->color().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.MarkArea.color");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }

  // optional string material = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->material().data(), static_cast<int>(this->material().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.MarkArea.material");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->material(), target);
  }

  // optional string static_area = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->static_area().data(),
        static_cast<int>(this->static_area().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.MarkArea.static_area");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->static_area(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.MarkArea)
  return target;
}

size_t MarkArea::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.MarkArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string color = 4;
    if (has_color()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->color());
    }

    // optional string material = 5;
    if (has_material()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->material());
    }

    // optional string static_area = 6;
    if (has_static_area()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->static_area());
    }

    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }

    // optional double speed = 3;
    if (has_speed()) {
      total_size += 1 + 8;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkArea::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.MarkArea)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkArea *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkArea>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.MarkArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.MarkArea)
    MergeFrom(*source);
  }
}

void MarkArea::MergeFrom(const MarkArea &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.MarkArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_color();
      color_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.color_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_material();
      material_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.material_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_static_area();
      static_area_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.static_area_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000020u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarkArea::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.MarkArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void MarkArea::CopyFrom(const MarkArea &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.MarkArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool MarkArea::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void MarkArea::Swap(MarkArea *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void MarkArea::InternalSwap(MarkArea *other) {
  using std::swap;
  color_.Swap(&other->color_,
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              GetArenaNoVirtual());
  material_.Swap(&other->material_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  static_area_.Swap(
      &other->static_area_,
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(speed_, other->speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarkArea::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void ProhibitedArea::InitAsDefaultInstance() {
  ::cvte::hdmap::_ProhibitedArea_default_instance_._instance.get_mutable()
      ->id_ = const_cast<::cvte::hdmap::Id *>(
      ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_ProhibitedArea_default_instance_._instance.get_mutable()
      ->polygon_ = const_cast<::cvte::hdmap::Polygon *>(
      ::cvte::hdmap::Polygon::internal_default_instance());
}
void ProhibitedArea::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void ProhibitedArea::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProhibitedArea::kIdFieldNumber;
const int ProhibitedArea::kPolygonFieldNumber;
const int ProhibitedArea::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProhibitedArea::ProhibitedArea()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_ProhibitedArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.ProhibitedArea)
}
ProhibitedArea::ProhibitedArea(const ProhibitedArea &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.reason_);
  }
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.ProhibitedArea)
}

void ProhibitedArea::SharedCtor() {
  reason_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&polygon_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(polygon_));
}

ProhibitedArea::~ProhibitedArea() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.ProhibitedArea)
  SharedDtor();
}

void ProhibitedArea::SharedDtor() {
  reason_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void ProhibitedArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *ProhibitedArea::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const ProhibitedArea &ProhibitedArea::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_ProhibitedArea.base);
  return *internal_default_instance();
}

void ProhibitedArea::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.ProhibitedArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProhibitedArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.ProhibitedArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
              this->reason().data(), static_cast<int>(this->reason().length()),
              ::google::protobuf::internal::WireFormat::PARSE,
              "cvte.hdmap.ProhibitedArea.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.ProhibitedArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.ProhibitedArea)
  return false;
#undef DO_
}

void ProhibitedArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.ProhibitedArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->reason().data(), static_cast<int>(this->reason().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.ProhibitedArea.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.ProhibitedArea)
}

::google::protobuf::uint8 *
ProhibitedArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.ProhibitedArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->reason().data(), static_cast<int>(this->reason().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "cvte.hdmap.ProhibitedArea.reason");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.ProhibitedArea)
  return target;
}

size_t ProhibitedArea::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.ProhibitedArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string reason = 3;
    if (has_reason()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->reason());
    }

    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProhibitedArea::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.ProhibitedArea)
  GOOGLE_DCHECK_NE(&from, this);
  const ProhibitedArea *source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ProhibitedArea>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.ProhibitedArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.ProhibitedArea)
    MergeFrom(*source);
  }
}

void ProhibitedArea::MergeFrom(const ProhibitedArea &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.ProhibitedArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
  }
}

void ProhibitedArea::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.ProhibitedArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ProhibitedArea::CopyFrom(const ProhibitedArea &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.ProhibitedArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ProhibitedArea::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void ProhibitedArea::Swap(ProhibitedArea *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ProhibitedArea::InternalSwap(ProhibitedArea *other) {
  using std::swap;
  reason_.Swap(&other->reason_,
               &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
               GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProhibitedArea::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void BlackArea::InitAsDefaultInstance() {
  ::cvte::hdmap::_BlackArea_default_instance_._instance.get_mutable()->id_ =
      const_cast<::cvte::hdmap::Id *>(
          ::cvte::hdmap::Id::internal_default_instance());
  ::cvte::hdmap::_BlackArea_default_instance_._instance.get_mutable()
      ->polygon_ = const_cast<::cvte::hdmap::Polygon *>(
      ::cvte::hdmap::Polygon::internal_default_instance());
}
void BlackArea::clear_id() {
  if (id_ != NULL)
    id_->Clear();
  clear_has_id();
}
void BlackArea::clear_polygon() {
  if (polygon_ != NULL)
    polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlackArea::kIdFieldNumber;
const int BlackArea::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlackArea::BlackArea()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_BlackArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.BlackArea)
}
BlackArea::BlackArea(const BlackArea &from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::cvte::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.BlackArea)
}

void BlackArea::SharedCtor() {
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&polygon_) -
                               reinterpret_cast<char *>(&id_)) +
               sizeof(polygon_));
}

BlackArea::~BlackArea() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.BlackArea)
  SharedDtor();
}

void BlackArea::SharedDtor() {
  if (this != internal_default_instance())
    delete id_;
  if (this != internal_default_instance())
    delete polygon_;
}

void BlackArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *BlackArea::descriptor() {
  ::protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const BlackArea &BlackArea::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fc5_5farea_2eproto::scc_info_BlackArea.base);
  return *internal_default_instance();
}

void BlackArea::Clear() {
  // @@protoc_insertion_point(message_clear_start:cvte.hdmap.BlackArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlackArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                 \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.BlackArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cvte.hdmap.Id id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.BlackArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.BlackArea)
  return false;
#undef DO_
}

void BlackArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.BlackArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_id(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_polygon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.BlackArea)
}

::google::protobuf::uint8 *BlackArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void) deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.BlackArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cvte.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_id(), deterministic,
                                    target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_polygon(), deterministic,
                                    target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.BlackArea)
  return target;
}

size_t BlackArea::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.BlackArea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .cvte.hdmap.Id id = 1;
    if (has_id()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*id_);
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSize(*polygon_);
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackArea::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.BlackArea)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackArea *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlackArea>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.BlackArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.BlackArea)
    MergeFrom(*source);
  }
}

void BlackArea::MergeFrom(const BlackArea &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.BlackArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::cvte::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
  }
}

void BlackArea::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.BlackArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void BlackArea::CopyFrom(const BlackArea &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.BlackArea)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool BlackArea::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized())
      return false;
  }
  return true;
}

void BlackArea::Swap(BlackArea *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void BlackArea::InternalSwap(BlackArea *other) {
  using std::swap;
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlackArea::GetMetadata() const {
  protobuf_map_5fc5_5farea_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fc5_5farea_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace cvte
namespace google {
namespace protobuf {
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::MapArea *
Arena::CreateMaybeMessage<::cvte::hdmap::MapArea>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::MapArea>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::CleanArea *
Arena::CreateMaybeMessage<::cvte::hdmap::CleanArea>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::CleanArea>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::SlopeArea *
Arena::CreateMaybeMessage<::cvte::hdmap::SlopeArea>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::SlopeArea>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::PitArea *
Arena::CreateMaybeMessage<::cvte::hdmap::PitArea>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::PitArea>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::Elevator *
Arena::CreateMaybeMessage<::cvte::hdmap::Elevator>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::Elevator>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::NarrowArea *
Arena::CreateMaybeMessage<::cvte::hdmap::NarrowArea>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::NarrowArea>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::MarkArea *
Arena::CreateMaybeMessage<::cvte::hdmap::MarkArea>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::MarkArea>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::ProhibitedArea *
Arena::CreateMaybeMessage<::cvte::hdmap::ProhibitedArea>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::ProhibitedArea>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::BlackArea *
Arena::CreateMaybeMessage<::cvte::hdmap::BlackArea>(Arena *arena) {
  return Arena::CreateInternal<::cvte::hdmap::BlackArea>(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
