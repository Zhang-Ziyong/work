// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_speed_control.proto

#include "map_speed_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
}  // namespace protobuf_map_5fgeometry_2eproto
namespace protobuf_map_5fspeed_5fcontrol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_5fspeed_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeedControl;
}  // namespace protobuf_map_5fspeed_5fcontrol_2eproto
namespace cvte {
namespace hdmap {
class SpeedControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedControl>
      _instance;
} _SpeedControl_default_instance_;
class SpeedControlsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedControls>
      _instance;
} _SpeedControls_default_instance_;
}  // namespace hdmap
}  // namespace cvte
namespace protobuf_map_5fspeed_5fcontrol_2eproto {
static void InitDefaultsSpeedControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_SpeedControl_default_instance_;
    new (ptr) ::cvte::hdmap::SpeedControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::SpeedControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeedControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeedControl}, {
      &protobuf_map_5fgeometry_2eproto::scc_info_Polygon.base,}};

static void InitDefaultsSpeedControls() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cvte::hdmap::_SpeedControls_default_instance_;
    new (ptr) ::cvte::hdmap::SpeedControls();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvte::hdmap::SpeedControls::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeedControls =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeedControls}, {
      &protobuf_map_5fspeed_5fcontrol_2eproto::scc_info_SpeedControl.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedControl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedControls.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedControl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedControl, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedControl, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedControl, speed_limit_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedControls, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedControls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cvte::hdmap::SpeedControls, speed_control_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::cvte::hdmap::SpeedControl)},
  { 11, 17, sizeof(::cvte::hdmap::SpeedControls)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_SpeedControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cvte::hdmap::_SpeedControls_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "map_speed_control.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027map_speed_control.proto\022\ncvte.hdmap\032\022m"
      "ap_geometry.proto\"W\n\014SpeedControl\022\014\n\004nam"
      "e\030\001 \001(\t\022$\n\007polygon\030\002 \001(\0132\023.cvte.hdmap.Po"
      "lygon\022\023\n\013speed_limit\030\003 \001(\001\"@\n\rSpeedContr"
      "ols\022/\n\rspeed_control\030\001 \003(\0132\030.cvte.hdmap."
      "SpeedControl"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_speed_control.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5fspeed_5fcontrol_2eproto
namespace cvte {
namespace hdmap {

// ===================================================================

void SpeedControl::InitAsDefaultInstance() {
  ::cvte::hdmap::_SpeedControl_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::cvte::hdmap::Polygon*>(
      ::cvte::hdmap::Polygon::internal_default_instance());
}
void SpeedControl::clear_polygon() {
  if (polygon_ != NULL) polygon_->Clear();
  clear_has_polygon();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedControl::kNameFieldNumber;
const int SpeedControl::kPolygonFieldNumber;
const int SpeedControl::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedControl::SpeedControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fspeed_5fcontrol_2eproto::scc_info_SpeedControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.SpeedControl)
}
SpeedControl::SpeedControl(const SpeedControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_polygon()) {
    polygon_ = new ::cvte::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  speed_limit_ = from.speed_limit_;
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.SpeedControl)
}

void SpeedControl::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&polygon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&polygon_)) + sizeof(speed_limit_));
}

SpeedControl::~SpeedControl() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.SpeedControl)
  SharedDtor();
}

void SpeedControl::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete polygon_;
}

void SpeedControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedControl::descriptor() {
  ::protobuf_map_5fspeed_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fspeed_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedControl& SpeedControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fspeed_5fcontrol_2eproto::scc_info_SpeedControl.base);
  return *internal_default_instance();
}


void SpeedControl::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.SpeedControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  speed_limit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.SpeedControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cvte.hdmap.SpeedControl.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cvte.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.SpeedControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.SpeedControl)
  return false;
#undef DO_
}

void SpeedControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.SpeedControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cvte.hdmap.SpeedControl.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_polygon(), output);
  }

  // optional double speed_limit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.SpeedControl)
}

::google::protobuf::uint8* SpeedControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.SpeedControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cvte.hdmap.SpeedControl.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .cvte.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_polygon(), deterministic, target);
  }

  // optional double speed_limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.SpeedControl)
  return target;
}

size_t SpeedControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.SpeedControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .cvte.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *polygon_);
    }

    // optional double speed_limit = 3;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.SpeedControl)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.SpeedControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.SpeedControl)
    MergeFrom(*source);
  }
}

void SpeedControl::MergeFrom(const SpeedControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.SpeedControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::cvte::hdmap::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.SpeedControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedControl::CopyFrom(const SpeedControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.SpeedControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedControl::IsInitialized() const {
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized()) return false;
  }
  return true;
}

void SpeedControl::Swap(SpeedControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedControl::InternalSwap(SpeedControl* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(polygon_, other->polygon_);
  swap(speed_limit_, other->speed_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedControl::GetMetadata() const {
  protobuf_map_5fspeed_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fspeed_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedControls::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedControls::kSpeedControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedControls::SpeedControls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_5fspeed_5fcontrol_2eproto::scc_info_SpeedControls.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvte.hdmap.SpeedControls)
}
SpeedControls::SpeedControls(const SpeedControls& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      speed_control_(from.speed_control_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cvte.hdmap.SpeedControls)
}

void SpeedControls::SharedCtor() {
}

SpeedControls::~SpeedControls() {
  // @@protoc_insertion_point(destructor:cvte.hdmap.SpeedControls)
  SharedDtor();
}

void SpeedControls::SharedDtor() {
}

void SpeedControls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedControls::descriptor() {
  ::protobuf_map_5fspeed_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fspeed_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedControls& SpeedControls::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_5fspeed_5fcontrol_2eproto::scc_info_SpeedControls.base);
  return *internal_default_instance();
}


void SpeedControls::Clear() {
// @@protoc_insertion_point(message_clear_start:cvte.hdmap.SpeedControls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_control_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedControls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cvte.hdmap.SpeedControls)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cvte.hdmap.SpeedControl speed_control = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_speed_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cvte.hdmap.SpeedControls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cvte.hdmap.SpeedControls)
  return false;
#undef DO_
}

void SpeedControls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cvte.hdmap.SpeedControls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cvte.hdmap.SpeedControl speed_control = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_control_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->speed_control(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cvte.hdmap.SpeedControls)
}

::google::protobuf::uint8* SpeedControls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cvte.hdmap.SpeedControls)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cvte.hdmap.SpeedControl speed_control = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_control_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->speed_control(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvte.hdmap.SpeedControls)
  return target;
}

size_t SpeedControls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvte.hdmap.SpeedControls)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cvte.hdmap.SpeedControl speed_control = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_control_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speed_control(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedControls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvte.hdmap.SpeedControls)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedControls* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedControls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvte.hdmap.SpeedControls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvte.hdmap.SpeedControls)
    MergeFrom(*source);
  }
}

void SpeedControls::MergeFrom(const SpeedControls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvte.hdmap.SpeedControls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_control_.MergeFrom(from.speed_control_);
}

void SpeedControls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvte.hdmap.SpeedControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedControls::CopyFrom(const SpeedControls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvte.hdmap.SpeedControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedControls::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->speed_control())) return false;
  return true;
}

void SpeedControls::Swap(SpeedControls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedControls::InternalSwap(SpeedControls* other) {
  using std::swap;
  CastToBase(&speed_control_)->InternalSwap(CastToBase(&other->speed_control_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedControls::GetMetadata() const {
  protobuf_map_5fspeed_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fspeed_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace cvte
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::SpeedControl* Arena::CreateMaybeMessage< ::cvte::hdmap::SpeedControl >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::SpeedControl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::cvte::hdmap::SpeedControls* Arena::CreateMaybeMessage< ::cvte::hdmap::SpeedControls >(Arena* arena) {
  return Arena::CreateInternal< ::cvte::hdmap::SpeedControls >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
